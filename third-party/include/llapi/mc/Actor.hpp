/**
 * @file  Actor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "VehicleUtils.hpp"

#define BEFORE_EXTRA
// Add include headers & pre-declares
#include "MobEffectInstance.hpp"
#include "Tick.hpp"
#include "ActorDamageSource.hpp"
#include "VehicleUtils.hpp"
#include "Vec3.hpp"
class Actor;
class Player;
class NetworkIdentifier;
class CompoundTag;
class UserEntityIdentifierComponent;
class Vec2;
class BlockInstance;
class ItemStack;
class BlockSource;
enum class FaceID : char;

#undef BEFORE_EXTRA

/**
 * @brief MC class Actor.
 *
 */
class Actor {

#define AFTER_EXTRA
// Add new members to class
public:
    enum class InitializationMethod;

    LIAPI std::string getTypeName() const;
    LIAPI Vec3 getFeetPosition() const;
    LIAPI BlockSource* getBlockSource() const;
    LIAPI Vec2* getDirection() const;
    LIAPI ActorUniqueID getActorUniqueId() const;
    LIAPI Vec3 getCameraPos() const;
    LIAPI Tick* getLastTick() const;
    LIAPI std::vector<std::string> getAllTags();
    LIAPI BlockInstance getBlockFromViewVector(bool includeLiquid = false, bool solidOnly = false, float maxDistance = 5.25f, bool ignoreBorderBlocks = true, bool fullOnly = false) const;
    LIAPI BlockInstance getBlockFromViewVector(FaceID& face, bool includeLiquid = false, bool solidOnly = false, float maxDistance = 5.25f, bool ignoreBorderBlocks = true, bool fullOnly = false) const;
    LIAPI UserEntityIdentifierComponent* getUserEntityIdentifierComponent() const;
    LIAPI Actor* getActorFromViewVector(float maxDistance);
    LIAPI BlockPos getBlockPos();
    LIAPI BlockInstance getBlockStandingOn() const;

    LIAPI bool isSimulatedPlayer() const;
    LIAPI bool isPlayer(bool allowSimulatedPlayer = true) const;
    LIAPI bool isItemActor() const;
    LIAPI bool isOnGround() const;
    LIAPI bool setOnFire(int time, bool isEffect);
    LIAPI bool stopFire();
    LIAPI bool hasTag(const string& tag);
    LIAPI bool hurtEntity(float damage, ActorDamageCause damageCause = ActorDamageCause::Override);
    LIAPI bool teleport(Vec3 to, int dimID, float x, float y);
    LIAPI bool teleport(Vec3 pos,int dimid);
    LIAPI ItemStack* getHandSlot();
    LIAPI bool rename(const string& name);
    LIAPI std::unique_ptr<CompoundTag> getNbt();
    LIAPI bool setNbt(CompoundTag* nbt);
    LIAPI bool refreshActorData();
    LIAPI bool addEffect(MobEffect::EffectType type, int tick, int level, bool ambient = false, bool showParticles = true, bool showAnimation = false);
    LIAPI float quickEvalMolangScript(const string& expression);
    //LIAPI Json::Value quickEvalMolangScriptAsJson(const string& expression);

    inline Vec3 getPos()
    {
        return getPosition();
    }
    inline Vec3 getPosOld()
    {
        return getPosPrev();
    }

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ACTOR
public:
    class Actor& operator=(class Actor const &) = delete;
    Actor(class Actor const &) = delete;
    Actor() = delete;
#endif

public:
    /**
     * @vftbl  0
     * @symbol ?hasComponent@Actor@@UEBA_NAEBVHashedString@@@Z
     * @hash   -1375264661
     */
    virtual bool hasComponent(class HashedString const &) const;
    /**
     * @vftbl  1
     * @symbol ?getLastHurtByMob@Actor@@UEAAPEAVMob@@XZ
     * @hash   -209754562
     */
    virtual class Mob * getLastHurtByMob();
    /**
     * @vftbl  2
     * @symbol ?setLastHurtByMob@Actor@@UEAAXPEAVMob@@@Z
     * @hash   -1692794348
     */
    virtual void setLastHurtByMob(class Mob *);
    /**
     * @vftbl  3
     * @symbol ?getLastHurtByPlayer@Actor@@UEAAPEAVPlayer@@XZ
     * @hash   1625945898
     */
    virtual class Player * getLastHurtByPlayer();
    /**
     * @vftbl  4
     * @symbol ?setLastHurtByPlayer@Actor@@UEAAXPEAVPlayer@@@Z
     * @hash   1666756926
     */
    virtual void setLastHurtByPlayer(class Player *);
    /**
     * @vftbl  5
     * @symbol ?getLastHurtMob@Actor@@UEAAPEAVMob@@XZ
     * @hash   -1244952107
     */
    virtual class Mob * getLastHurtMob();
    /**
     * @vftbl  6
     * @symbol ?setLastHurtMob@Actor@@UEAAXPEAV1@@Z
     * @hash   232150944
     */
    virtual void setLastHurtMob(class Actor *);
    /**
     * @vftbl  7
     * @symbol ?outOfWorld@Actor@@UEAAXXZ
     * @hash   931284799
     */
    virtual void outOfWorld();
    /**
     * @vftbl  8
     * @symbol ?reloadHardcoded@Actor@@MEAAXW4InitializationMethod@1@AEBVVariantParameterList@@@Z
     * @hash   615365225
     */
    virtual void reloadHardcoded(enum class Actor::InitializationMethod, class VariantParameterList const &);
    /**
     * @vftbl  9
     * @symbol ?reloadHardcodedClient@Actor@@MEAAXW4InitializationMethod@1@AEBVVariantParameterList@@@Z
     * @hash   1368116356
     */
    virtual void reloadHardcodedClient(enum class Actor::InitializationMethod, class VariantParameterList const &);
    /**
     * @vftbl  10
     * @symbol ?initializeComponents@Actor@@MEAAXW4InitializationMethod@1@AEBVVariantParameterList@@@Z
     * @hash   84902044
     */
    virtual void initializeComponents(enum class Actor::InitializationMethod, class VariantParameterList const &);
    /**
     * @vftbl  11
     * @symbol ?reloadComponents@Actor@@MEAAXW4InitializationMethod@1@AEBVVariantParameterList@@@Z
     * @hash   -739593659
     */
    virtual void reloadComponents(enum class Actor::InitializationMethod, class VariantParameterList const &);
    /**
     * @vftbl  12
     * @symbol ?_serverInitItemStackIds@Actor@@MEAAXXZ
     * @hash   219112864
     */
    virtual void _serverInitItemStackIds();
    /**
     * @vftbl  13
     * @symbol ?_doInitialMove@Actor@@MEAAXXZ
     * @hash   1055755606
     */
    virtual void _doInitialMove();
    /**
     * @vftbl  14
     * @hash   1676995139
     */
    virtual ~Actor();
    /**
     * @vftbl  15
     * @symbol ?resetUserPos@Actor@@UEAAX_N@Z
     * @hash   1900726656
     */
    virtual void resetUserPos(bool);
    /**
     * @vftbl  16
     * @symbol ?getOwnerEntityType@Actor@@UEAA?AW4ActorType@@XZ
     * @hash   -1427969123
     */
    virtual enum class ActorType getOwnerEntityType();
    /**
     * @vftbl  17
     * @symbol ?remove@Actor@@UEAAXXZ
     * @hash   282059622
     */
    virtual void remove();
    /**
     * @vftbl  18
     * @symbol ?setPos@Actor@@UEAAXAEBVVec3@@@Z
     * @hash   1909086350
     */
    virtual void setPos(class Vec3 const &);
    /**
     * @vftbl  19
     * @symbol ?isRuntimePredictedMovementEnabled@Actor@@UEBA_NXZ
     * @hash   1540291195
     */
    virtual bool isRuntimePredictedMovementEnabled() const;
    /**
     * @vftbl  20
     * @symbol ?getPredictedMovementValues@Actor@@UEBAAEBUPredictedMovementValues@@XZ
     * @hash   281921421
     */
    virtual struct PredictedMovementValues const & getPredictedMovementValues() const;
    /**
     * @vftbl  21
     * @symbol ?getPosition@Actor@@UEBAAEBVVec3@@XZ
     * @hash   1141875768
     */
    virtual class Vec3 const & getPosition() const;
    /**
     * @vftbl  22
     * @symbol ?getPosPrev@Actor@@UEBAAEBVVec3@@XZ
     * @hash   -1826700118
     */
    virtual class Vec3 const & getPosPrev() const;
    /**
     * @vftbl  23
     * @symbol ?getPosExtrapolated@Actor@@UEBA?BVVec3@@M@Z
     * @hash   1299233339
     */
    virtual class Vec3 const getPosExtrapolated(float) const;
    /**
     * @vftbl  24
     * @symbol ?getAttachPos@Actor@@UEBA?AVVec3@@W4ActorLocation@@M@Z
     * @hash   993836198
     */
    virtual class Vec3 getAttachPos(enum class ActorLocation, float) const;
    /**
     * @vftbl  25
     * @symbol ?getFiringPos@Actor@@UEBA?AVVec3@@XZ
     * @hash   -278508346
     */
    virtual class Vec3 getFiringPos() const;
    /**
     * @vftbl  26
     * @symbol ?setRot@Actor@@UEAAXAEBVVec2@@@Z
     * @hash   -820659428
     */
    virtual void setRot(class Vec2 const &);
    /**
     * @vftbl  27
     * @symbol ?move@Actor@@UEAAXAEBVVec3@@@Z
     * @hash   -1191478065
     */
    virtual void move(class Vec3 const &);
    /**
     * @vftbl  28
     * @symbol ?move@Actor@@UEBAXAEAUIActorMovementProxy@@AEBVVec3@@@Z
     * @hash   -1300083736
     */
    virtual void move(struct IActorMovementProxy &, class Vec3 const &) const;
    /**
     * @vftbl  29
     * @symbol ?getInterpolatedRidingPosition@Actor@@UEBA?AVVec3@@M@Z
     * @hash   -785439186
     */
    virtual class Vec3 getInterpolatedRidingPosition(float) const;
    /**
     * @vftbl  30
     * @symbol ?getInterpolatedBodyRot@Actor@@UEBAMM@Z
     * @hash   -705394549
     */
    virtual float getInterpolatedBodyRot(float) const;
    /**
     * @vftbl  31
     * @symbol ?getInterpolatedHeadRot@Actor@@UEBAMM@Z
     * @hash   558132649
     */
    virtual float getInterpolatedHeadRot(float) const;
    /**
     * @vftbl  32
     * @symbol ?getInterpolatedBodyYaw@Actor@@UEBAMM@Z
     * @hash   1003794579
     */
    virtual float getInterpolatedBodyYaw(float) const;
    /**
     * @vftbl  33
     * @symbol ?getYawSpeedInDegreesPerSecond@Actor@@UEBAMXZ
     * @hash   1621589494
     */
    virtual float getYawSpeedInDegreesPerSecond() const;
    /**
     * @vftbl  34
     * @symbol ?getInterpolatedWalkAnimSpeed@Actor@@UEBAMM@Z
     * @hash   -1693756493
     */
    virtual float getInterpolatedWalkAnimSpeed(float) const;
    /**
     * @vftbl  35
     * @symbol ?getInterpolatedRidingOffset@Actor@@UEBA?AVVec3@@M@Z
     * @hash   -1682383644
     */
    virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /**
     * @vftbl  36
     * @symbol ?resetInterpolated@Actor@@UEAAXXZ
     * @hash   799222404
     */
    virtual void resetInterpolated();
    /**
     * @vftbl  37
     * @symbol ?updateEntityInside@Actor@@UEAAXAEBVAABB@@@Z
     * @hash   178767943
     */
    virtual void updateEntityInside(class AABB const &);
    /**
     * @vftbl  38
     * @symbol ?updateEntityInside@Actor@@UEAAXXZ
     * @hash   -685974438
     */
    virtual void updateEntityInside();
    /**
     * @vftbl  39
     * @symbol ?isFireImmune@Actor@@UEBA_NXZ
     * @hash   1808400422
     */
    virtual bool isFireImmune() const;
    /**
     * @vftbl  40
     * @hash   -246209152
     */
    virtual void __unk_vfn_40();
    /**
     * @vftbl  41
     * @symbol ?blockedByShield@Actor@@UEAAXAEBVActorDamageSource@@AEAV1@@Z
     * @hash   -1172446237
     */
    virtual void blockedByShield(class ActorDamageSource const &, class Actor &);
    /**
     * @vftbl  42
     * @symbol ?canDisableShield@Actor@@UEAA_NXZ
     * @hash   -626696603
     */
    virtual bool canDisableShield();
    /**
     * @vftbl  43
     * @symbol ?teleportTo@Actor@@UEAAXAEBVVec3@@_NHH1@Z
     * @hash   941276242
     */
    virtual void teleportTo(class Vec3 const &, bool, int, int, bool);
    /**
     * @vftbl  44
     * @symbol ?tryTeleportTo@Actor@@UEAA_NAEBVVec3@@_N1HH@Z
     * @hash   1431529381
     */
    virtual bool tryTeleportTo(class Vec3 const &, bool, bool, int, int);
    /**
     * @vftbl  45
     * @symbol ?chorusFruitTeleport@Actor@@UEAAXAEBVVec3@@@Z
     * @hash   -1540546521
     */
    virtual void chorusFruitTeleport(class Vec3 const &);
    /**
     * @vftbl  46
     * @symbol ?lerpMotion@Actor@@UEAAXAEBVVec3@@@Z
     * @hash   2072488163
     */
    virtual void lerpMotion(class Vec3 const &);
    /**
     * @vftbl  47
     * @symbol ?tryCreateAddActorPacket@Actor@@UEAA?AV?$unique_ptr@VAddActorBasePacket@@U?$default_delete@VAddActorBasePacket@@@std@@@std@@XZ
     * @hash   1106519512
     */
    virtual std::unique_ptr<class AddActorBasePacket> tryCreateAddActorPacket();
    /**
     * @vftbl  48
     * @symbol ?normalTick@Actor@@UEAAXXZ
     * @hash   -1905649866
     */
    virtual void normalTick();
    /**
     * @vftbl  49
     * @symbol ?baseTick@Actor@@UEAAXXZ
     * @hash   146693536
     */
    virtual void baseTick();
    /**
     * @vftbl  50
     * @symbol ?passengerTick@Actor@@UEAAXXZ
     * @hash   -639274647
     */
    virtual void passengerTick();
    /**
     * @vftbl  51
     * @symbol ?positionPassenger@Actor@@UEAAXAEAV1@M@Z
     * @hash   -475049418
     */
    virtual void positionPassenger(class Actor &, float);
    /**
     * @vftbl  52
     * @symbol ?startRiding@Actor@@UEAA_NAEAV1@@Z
     * @hash   1262678660
     */
    virtual bool startRiding(class Actor &);
    /**
     * @vftbl  53
     * @symbol ?addPassenger@Actor@@UEAAXAEAV1@@Z
     * @hash   1064529492
     */
    virtual void addPassenger(class Actor &);
    /**
     * @vftbl  54
     * @symbol ?flagPassengerToRemove@Actor@@UEAAXAEAV1@@Z
     * @hash   -85395584
     */
    virtual void flagPassengerToRemove(class Actor &);
    /**
     * @vftbl  55
     * @symbol ?getExitTip@Actor@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBV23@W4InputMode@@@Z
     * @hash   -1453613155
     */
    virtual std::string getExitTip(std::string const &, enum class InputMode) const;
    /**
     * @vftbl  56
     * @symbol ?intersects@Actor@@UEBA_NAEBVVec3@@0@Z
     * @hash   -90489921
     */
    virtual bool intersects(class Vec3 const &, class Vec3 const &) const;
    /**
     * @vftbl  57
     * @symbol ?isInWall@Actor@@UEBA_NXZ
     * @hash   1618826396
     */
    virtual bool isInWall() const;
    /**
     * @vftbl  58
     * @symbol ?isInvisible@Actor@@UEBA_NXZ
     * @hash   -1460338298
     */
    virtual bool isInvisible() const;
    /**
     * @vftbl  59
     * @symbol ?canShowNameTag@Actor@@UEBA_NXZ
     * @hash   -1702456747
     */
    virtual bool canShowNameTag() const;
    /**
     * @vftbl  60
     * @hash   -196162194
     */
    virtual void __unk_vfn_60();
    /**
     * @vftbl  61
     * @symbol ?setNameTagVisible@Actor@@UEAAX_N@Z
     * @hash   390879397
     */
    virtual void setNameTagVisible(bool);
    /**
     * @vftbl  62
     * @symbol ?getNameTag@Actor@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     * @hash   2106404396
     */
    virtual std::string const & getNameTag() const;
    /**
     * @vftbl  63
     * @symbol ?getNameTagAsHash@Actor@@UEBA_KXZ
     * @hash   407167316
     */
    virtual unsigned __int64 getNameTagAsHash() const;
    /**
     * @vftbl  64
     * @symbol ?getFormattedNameTag@Actor@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     * @hash   641157950
     */
    virtual std::string getFormattedNameTag() const;
    /**
     * @vftbl  65
     * @symbol ?filterFormattedNameTag@Actor@@UEAAXAEBVUIProfanityContext@@@Z
     * @hash   1480589449
     */
    virtual void filterFormattedNameTag(class UIProfanityContext const &);
    /**
     * @vftbl  66
     * @symbol ?setNameTag@Actor@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -1970087891
     */
    virtual void setNameTag(std::string const &);
    /**
     * @vftbl  67
     * @hash   -182486203
     */
    virtual void __unk_vfn_67();
    /**
     * @vftbl  68
     * @symbol ?setScoreTag@Actor@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -1547280592
     */
    virtual void setScoreTag(std::string const &);
    /**
     * @vftbl  69
     * @symbol ?getScoreTag@Actor@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     * @hash   2025552145
     */
    virtual std::string const & getScoreTag() const;
    /**
     * @vftbl  70
     * @symbol ?isInWater@Actor@@UEBA_NXZ
     * @hash   2087207963
     */
    virtual bool isInWater() const;
    /**
     * @vftbl  71
     * @symbol ?hasEnteredWater@Actor@@UEBA_NXZ
     * @hash   696793949
     */
    virtual bool hasEnteredWater() const;
    /**
     * @vftbl  72
     * @symbol ?isInLava@Actor@@UEBA_NXZ
     * @hash   1215828242
     */
    virtual bool isInLava() const;
    /**
     * @vftbl  73
     * @symbol ?isUnderLiquid@Actor@@UEBA_NW4MaterialType@@@Z
     * @hash   -212164076
     */
    virtual bool isUnderLiquid(enum class MaterialType) const;
    /**
     * @vftbl  74
     * @symbol ?isOverWater@Actor@@UEBA_NXZ
     * @hash   1423326492
     */
    virtual bool isOverWater() const;
    /**
     * @vftbl  75
     * @symbol ?setBlockMovementSlowdownMultiplier@Actor@@UEAAXAEBVBlockLegacy@@AEBVVec3@@@Z
     * @hash   -1626742289
     */
    virtual void setBlockMovementSlowdownMultiplier(class BlockLegacy const &, class Vec3 const &);
    /**
     * @vftbl  76
     * @symbol ?resetBlockMovementSlowdownMultiplier@Actor@@UEAAXXZ
     * @hash   -914872589
     */
    virtual void resetBlockMovementSlowdownMultiplier();
    /**
     * @vftbl  77
     * @symbol ?getCameraOffset@Actor@@UEBAMXZ
     * @hash   67619495
     */
    virtual float getCameraOffset() const;
    /**
     * @vftbl  78
     * @symbol ?getShadowHeightOffs@Actor@@UEAAMXZ
     * @hash   -177513269
     */
    virtual float getShadowHeightOffs();
    /**
     * @vftbl  79
     * @symbol ?getShadowRadius@Actor@@UEBAMXZ
     * @hash   1158462977
     */
    virtual float getShadowRadius() const;
    /**
     * @vftbl  80
     * @symbol ?getHeadLookVector@Actor@@UEBA?AVVec3@@M@Z
     * @hash   -1484101955
     */
    virtual class Vec3 getHeadLookVector(float) const;
    /**
     * @vftbl  81
     * @hash   -130769027
     */
    virtual void __unk_vfn_81();
    /**
     * @vftbl  82
     * @symbol ?canSee@Actor@@UEBA_NAEBV1@@Z
     * @hash   -1399319260
     */
    virtual bool canSee(class Actor const &) const;
    /**
     * @vftbl  83
     * @symbol ?canSee@Actor@@UEBA_NAEBVVec3@@@Z
     * @hash   -891717334
     */
    virtual bool canSee(class Vec3 const &) const;
    /**
     * @vftbl  84
     * @hash   -135209808
     */
    virtual void __unk_vfn_84();
    /**
     * @vftbl  85
     * @symbol ?isSkyLit@Actor@@UEAA_NM@Z
     * @hash   256473662
     */
    virtual bool isSkyLit(float);
    /**
     * @vftbl  86
     * @symbol ?getBrightness@Actor@@UEBAMM@Z
     * @hash   -1481020272
     */
    virtual float getBrightness(float) const;
    /**
     * @vftbl  87
     * @hash   -125227901
     */
    virtual void __unk_vfn_87();
    /**
     * @vftbl  88
     * @symbol ?playerTouch@Actor@@UEAAXAEAVPlayer@@@Z
     * @hash   -2119849309
     */
    virtual void playerTouch(class Player &);
    /**
     * @vftbl  89
     * @symbol ?onAboveBubbleColumn@Actor@@UEAAX_N@Z
     * @hash   2123311626
     */
    virtual void onAboveBubbleColumn(bool);
    /**
     * @vftbl  90
     * @symbol ?onInsideBubbleColumn@Actor@@UEAAX_N@Z
     * @hash   -424690723
     */
    virtual void onInsideBubbleColumn(bool);
    /**
     * @vftbl  91
     * @symbol ?isImmobile@Actor@@UEBA_NXZ
     * @hash   1949659411
     */
    virtual bool isImmobile() const;
    /**
     * @vftbl  92
     * @symbol ?isSilent@Actor@@UEBA_NXZ
     * @hash   1460491106
     */
    virtual bool isSilent() const;
    /**
     * @vftbl  93
     * @symbol ?isSilentObserver@Actor@@UEBA_NXZ
     * @hash   1400226328
     */
    virtual bool isSilentObserver() const;
    /**
     * @vftbl  94
     * @symbol ?isPickable@Actor@@UEAA_NXZ
     * @hash   1704388105
     */
    virtual bool isPickable();
    /**
     * @vftbl  95
     * @hash   -105657136
     */
    virtual void __unk_vfn_95();
    /**
     * @vftbl  96
     * @symbol ?isSleeping@Actor@@UEBA_NXZ
     * @hash   -2108820232
     */
    virtual bool isSleeping() const;
    /**
     * @vftbl  97
     * @symbol ?setSleeping@Actor@@UEAAX_N@Z
     * @hash   577286349
     */
    virtual void setSleeping(bool);
    /**
     * @vftbl  98
     * @hash   -95675229
     */
    virtual void __unk_vfn_98();
    /**
     * @vftbl  99
     * @symbol ?setSneaking@Actor@@UEAAX_N@Z
     * @hash   1873027994
     */
    virtual void setSneaking(bool);
    /**
     * @vftbl  100
     * @symbol ?isBlocking@Actor@@UEBA_NXZ
     * @hash   317192130
     */
    virtual bool isBlocking() const;
    /**
     * @vftbl  101
     * @symbol ?isDamageBlocked@Actor@@UEBA_NAEBVActorDamageSource@@@Z
     * @hash   -1267050862
     */
    virtual bool isDamageBlocked(class ActorDamageSource const &) const;
    /**
     * @vftbl  102
     * @symbol ?isAlive@Actor@@UEBA_NXZ
     * @hash   485127846
     */
    virtual bool isAlive() const;
    /**
     * @vftbl  103
     * @symbol ?isOnFire@Actor@@UEBA_NXZ
     * @hash   351640930
     */
    virtual bool isOnFire() const;
    /**
     * @vftbl  104
     * @symbol ?isOnHotBlock@Actor@@UEBA_NXZ
     * @hash   -1069757508
     */
    virtual bool isOnHotBlock() const;
    /**
     * @vftbl  105
     * @hash   1335894854
     */
    virtual void __unk_vfn_105();
    /**
     * @vftbl  106
     * @symbol ?isSurfaceMob@Actor@@UEBA_NXZ
     * @hash   -264572016
     */
    virtual bool isSurfaceMob() const;
    /**
     * @vftbl  107
     * @hash   1337741896
     */
    virtual void __unk_vfn_107();
    /**
     * @vftbl  108
     * @hash   1331454073
     */
    virtual void __unk_vfn_108();
    /**
     * @vftbl  109
     * @symbol ?isRemotePlayer@Actor@@UEBA_NXZ
     * @hash   700849556
     */
    virtual bool isRemotePlayer() const;
    /**
     * @vftbl  110
     * @hash   1359906400
     */
    virtual void __unk_vfn_110();
    /**
     * @vftbl  111
     * @symbol ?isAffectedByWaterBottle@Actor@@UEBA_NXZ
     * @hash   -474205509
     */
    virtual bool isAffectedByWaterBottle() const;
    /**
     * @vftbl  112
     * @symbol ?canAttack@Actor@@UEBA_NPEAV1@_N@Z
     * @hash   606073836
     */
    virtual bool canAttack(class Actor *, bool) const;
    /**
     * @vftbl  113
     * @symbol ?setTarget@Actor@@UEAAXPEAV1@@Z
     * @hash   -1843982314
     */
    virtual void setTarget(class Actor *);
    /**
     * @vftbl  114
     * @symbol ?isValidTarget@Actor@@UEBA_NPEAV1@@Z
     * @hash   -23077053
     */
    virtual bool isValidTarget(class Actor *) const;
    /**
     * @vftbl  115
     * @symbol ?attack@Actor@@UEAA_NAEAV1@AEBW4ActorDamageCause@@@Z
     * @hash   -307974678
     */
    virtual bool attack(class Actor &, enum class ActorDamageCause const &);
    /**
     * @vftbl  116
     * @symbol ?performRangedAttack@Actor@@UEAAXAEAV1@M@Z
     * @hash   1448701573
     */
    virtual void performRangedAttack(class Actor &, float);
    /**
     * @vftbl  117
     * @symbol ?getEquipmentCount@Actor@@UEBAHXZ
     * @hash   -2065743507
     */
    virtual int getEquipmentCount() const;
    /**
     * @vftbl  118
     * @symbol ?setOwner@Actor@@UEAAXUActorUniqueID@@@Z
     * @hash   -269574374
     */
    virtual void setOwner(struct ActorUniqueID);
    /**
     * @vftbl  119
     * @symbol ?setSitting@Actor@@UEAAX_N@Z
     * @hash   447535952
     */
    virtual void setSitting(bool);
    /**
     * @vftbl  120
     * @symbol ?onTame@Actor@@UEAAXXZ
     * @hash   -1511024138
     */
    virtual void onTame();
    /**
     * @vftbl  121
     * @symbol ?onFailedTame@Actor@@UEAAXXZ
     * @hash   1608804979
     */
    virtual void onFailedTame();
    /**
     * @vftbl  122
     * @symbol ?getInventorySize@Actor@@UEBAHXZ
     * @hash   -668181379
     */
    virtual int getInventorySize() const;
    /**
     * @vftbl  123
     * @symbol ?getEquipSlots@Actor@@UEBAHXZ
     * @hash   502307185
     */
    virtual int getEquipSlots() const;
    /**
     * @vftbl  124
     * @symbol ?getChestSlots@Actor@@UEBAHXZ
     * @hash   -1596710160
     */
    virtual int getChestSlots() const;
    /**
     * @vftbl  125
     * @symbol ?setStanding@Actor@@UEAAX_N@Z
     * @hash   535807772
     */
    virtual void setStanding(bool);
    /**
     * @vftbl  126
     * @symbol ?canPowerJump@Actor@@UEBA_NXZ
     * @hash   1101151510
     */
    virtual bool canPowerJump() const;
    /**
     * @vftbl  127
     * @symbol ?setCanPowerJump@Actor@@UEAAX_N@Z
     * @hash   -246826667
     */
    virtual void setCanPowerJump(bool);
    /**
     * @vftbl  128
     * @symbol ?isJumping@Actor@@UEBA_NXZ
     * @hash   -1410741043
     */
    virtual bool isJumping() const;
    /**
     * @vftbl  129
     * @symbol ?isEnchanted@Actor@@UEBA_NXZ
     * @hash   755183025
     */
    virtual bool isEnchanted() const;
    /**
     * @vftbl  130
     * @symbol ?vehicleLanded@Actor@@UEAAXAEBVVec3@@0@Z
     * @hash   79059248
     */
    virtual void vehicleLanded(class Vec3 const &, class Vec3 const &);
    /**
     * @vftbl  131
     * @symbol ?shouldRender@Actor@@UEBA_NXZ
     * @hash   221451404
     */
    virtual bool shouldRender() const;
    /**
     * @vftbl  132
     * @symbol ?playAmbientSound@Actor@@UEAAXXZ
     * @hash   1846774301
     */
    virtual void playAmbientSound();
    /**
     * @vftbl  133
     * @symbol ?getAmbientSound@Actor@@UEBA?AW4LevelSoundEvent@@XZ
     * @hash   -878026593
     */
    virtual enum class LevelSoundEvent getAmbientSound() const;
    /**
     * @vftbl  134
     * @symbol ?isInvulnerableTo@Actor@@UEBA_NAEBVActorDamageSource@@@Z
     * @hash   968566899
     */
    virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    /**
     * @vftbl  135
     * @symbol ?getBlockDamageCause@Actor@@UEBA?AW4ActorDamageCause@@AEBVBlock@@@Z
     * @hash   1730436609
     */
    virtual enum class ActorDamageCause getBlockDamageCause(class Block const &) const;
    /**
     * @vftbl  136
     * @symbol ?animateHurt@Actor@@UEAAXXZ
     * @hash   1153069442
     */
    virtual void animateHurt();
    /**
     * @vftbl  137
     * @symbol ?doFireHurt@Actor@@UEAA_NH@Z
     * @hash   -1929646133
     */
    virtual bool doFireHurt(int);
    /**
     * @vftbl  138
     * @symbol ?onLightningHit@Actor@@UEAAXXZ
     * @hash   2000132234
     */
    virtual void onLightningHit();
    /**
     * @vftbl  139
     * @symbol ?onBounceStarted@Actor@@UEAAXAEBVBlockPos@@AEBVBlock@@@Z
     * @hash   -157710914
     */
    virtual void onBounceStarted(class BlockPos const &, class Block const &);
    /**
     * @vftbl  140
     * @symbol ?feed@Actor@@UEAAXH@Z
     * @hash   1509606975
     */
    virtual void feed(int);
    /**
     * @vftbl  141
     * @symbol ?handleEntityEvent@Actor@@UEAAXW4ActorEvent@@H@Z
     * @hash   1476664977
     */
    virtual void handleEntityEvent(enum class ActorEvent, int);
    /**
     * @vftbl  142
     * @symbol ?getPickRadius@Actor@@UEAAMXZ
     * @hash   820861411
     */
    virtual float getPickRadius();
    /**
     * @vftbl  143
     * @symbol ?getActorRendererId@Actor@@UEBAAEBVHashedString@@XZ
     * @hash   1168986887
     */
    virtual class HashedString const & getActorRendererId() const;
    /**
     * @vftbl  144
     * @symbol ?spawnAtLocation@Actor@@UEAAPEAVItemActor@@HH@Z
     * @hash   445161265
     */
    virtual class ItemActor * spawnAtLocation(int, int);
    /**
     * @vftbl  145
     * @symbol ?spawnAtLocation@Actor@@UEAAPEAVItemActor@@HHM@Z
     * @hash   -240348271
     */
    virtual class ItemActor * spawnAtLocation(int, int, float);
    /**
     * @vftbl  146
     * @symbol ?spawnAtLocation@Actor@@UEAAPEAVItemActor@@AEBVBlock@@H@Z
     * @hash   1324837380
     */
    virtual class ItemActor * spawnAtLocation(class Block const &, int);
    /**
     * @vftbl  147
     * @symbol ?spawnAtLocation@Actor@@UEAAPEAVItemActor@@AEBVBlock@@HM@Z
     * @hash   1275491038
     */
    virtual class ItemActor * spawnAtLocation(class Block const &, int, float);
    /**
     * @vftbl  148
     * @symbol ?spawnAtLocation@Actor@@UEAAPEAVItemActor@@AEBVItemStack@@M@Z
     * @hash   706395999
     */
    virtual class ItemActor * spawnAtLocation(class ItemStack const &, float);
    /**
     * @vftbl  149
     * @symbol ?despawn@Actor@@UEAAXXZ
     * @hash   -1948689540
     */
    virtual void despawn();
    /**
     * @vftbl  150
     * @symbol ?killed@Actor@@UEAAXAEAV1@@Z
     * @hash   -917946880
     */
    virtual void killed(class Actor &);
    /**
     * @vftbl  151
     * @symbol ?awardKillScore@Actor@@UEAAXAEAV1@H@Z
     * @hash   135267881
     */
    virtual void awardKillScore(class Actor &, int);
    /**
     * @vftbl  152
     * @symbol ?setArmor@Actor@@UEAAXW4ArmorSlot@@AEBVItemStack@@@Z
     * @hash   -2051032330
     */
    virtual void setArmor(enum class ArmorSlot, class ItemStack const &);
    /**
     * @vftbl  153
     * @symbol ?getArmor@Actor@@UEBAAEBVItemStack@@W4ArmorSlot@@@Z
     * @hash   -1764862329
     */
    virtual class ItemStack const & getArmor(enum class ArmorSlot) const;
    /**
     * @vftbl  154
     * @symbol ?getAllArmor@Actor@@UEBA?AV?$vector@PEBVItemStack@@V?$allocator@PEBVItemStack@@@std@@@std@@XZ
     * @hash   -2112807464
     */
    virtual std::vector<class ItemStack const *> getAllArmor() const;
    /**
     * @vftbl  155
     * @symbol ?getArmorMaterialTypeInSlot@Actor@@UEBA?AW4ArmorMaterialType@@W4ArmorSlot@@@Z
     * @hash   -1554204963
     */
    virtual enum class ArmorMaterialType getArmorMaterialTypeInSlot(enum class ArmorSlot) const;
    /**
     * @vftbl  156
     * @symbol ?getArmorMaterialTextureTypeInSlot@Actor@@UEBA?AW4ArmorTextureType@@W4ArmorSlot@@@Z
     * @hash   -62541906
     */
    virtual enum class ArmorTextureType getArmorMaterialTextureTypeInSlot(enum class ArmorSlot) const;
    /**
     * @vftbl  157
     * @symbol ?getArmorColorInSlot@Actor@@UEBAMW4ArmorSlot@@H@Z
     * @hash   -1657815848
     */
    virtual float getArmorColorInSlot(enum class ArmorSlot, int) const;
    /**
     * @vftbl  158
     * @symbol ?getEquippedSlot@Actor@@UEBAAEBVItemStack@@W4EquipmentSlot@@@Z
     * @hash   -602910226
     */
    virtual class ItemStack const & getEquippedSlot(enum class EquipmentSlot) const;
    /**
     * @vftbl  159
     * @symbol ?setEquippedSlot@Actor@@UEAAXW4EquipmentSlot@@AEBVItemStack@@@Z
     * @hash   -1123005017
     */
    virtual void setEquippedSlot(enum class EquipmentSlot, class ItemStack const &);
    /**
     * @vftbl  160
     * @symbol ?setCarriedItem@Actor@@UEAAXAEBVItemStack@@@Z
     * @hash   962896199
     */
    virtual void setCarriedItem(class ItemStack const &);
    /**
     * @vftbl  161
     * @symbol ?getCarriedItem@Actor@@UEBAAEBVItemStack@@XZ
     * @hash   -849241214
     */
    virtual class ItemStack const & getCarriedItem() const;
    /**
     * @vftbl  162
     * @symbol ?setOffhandSlot@Actor@@UEAAXAEBVItemStack@@@Z
     * @hash   -1093996936
     */
    virtual void setOffhandSlot(class ItemStack const &);
    /**
     * @vftbl  163
     * @symbol ?getEquippedTotem@Actor@@UEBAAEBVItemStack@@XZ
     * @hash   937574407
     */
    virtual class ItemStack const & getEquippedTotem() const;
    /**
     * @vftbl  164
     * @symbol ?consumeTotem@Actor@@UEAA_NXZ
     * @hash   -1144871847
     */
    virtual bool consumeTotem();
    /**
     * @vftbl  165
     * @symbol ?save@Actor@@UEBA_NAEAVCompoundTag@@@Z
     * @hash   1726308331
     */
    virtual bool save(class CompoundTag &) const;
    /**
     * @vftbl  166
     * @symbol ?saveWithoutId@Actor@@UEBAXAEAVCompoundTag@@@Z
     * @hash   -1580386156
     */
    virtual void saveWithoutId(class CompoundTag &) const;
    /**
     * @vftbl  167
     * @symbol ?load@Actor@@UEAA_NAEBVCompoundTag@@AEAVDataLoadHelper@@@Z
     * @hash   1594641286
     */
    virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    /**
     * @vftbl  168
     * @symbol ?loadLinks@Actor@@UEAAXAEBVCompoundTag@@AEAV?$vector@UActorLink@@V?$allocator@UActorLink@@@std@@@std@@AEAVDataLoadHelper@@@Z
     * @hash   -1820029799
     */
    virtual void loadLinks(class CompoundTag const &, std::vector<struct ActorLink> &, class DataLoadHelper &);
    /**
     * @vftbl  169
     * @symbol ?getEntityTypeId@Actor@@UEBA?AW4ActorType@@XZ
     * @hash   -1583513440
     */
    virtual enum class ActorType getEntityTypeId() const;
    /**
     * @vftbl  170
     * @symbol ?queryEntityRenderer@Actor@@UEBAAEBVHashedString@@XZ
     * @hash   -746800360
     */
    virtual class HashedString const & queryEntityRenderer() const;
    /**
     * @vftbl  171
     * @symbol ?getSourceUniqueID@Actor@@UEBA?AUActorUniqueID@@XZ
     * @hash   -342250831
     */
    virtual struct ActorUniqueID getSourceUniqueID() const;
    /**
     * @vftbl  172
     * @symbol ?thawFreezeEffect@Actor@@UEAAXXZ
     * @hash   -2022054508
     */
    virtual void thawFreezeEffect();
    /**
     * @vftbl  173
     * @symbol ?canFreeze@Actor@@UEBA_NXZ
     * @hash   -226414582
     */
    virtual bool canFreeze() const;
    /**
     * @vftbl  174
     * @symbol ?isWearingLeatherArmor@Actor@@UEBA?B_NXZ
     * @hash   -2033928257
     */
    virtual bool const isWearingLeatherArmor() const;
    /**
     * @vftbl  175
     * @symbol ?getLiquidAABB@Actor@@UEBA?AVAABB@@W4MaterialType@@@Z
     * @hash   -245152443
     */
    virtual class AABB getLiquidAABB(enum class MaterialType) const;
    /**
     * @vftbl  176
     * @symbol ?handleInsidePortal@Actor@@UEAAXAEBVBlockPos@@@Z
     * @hash   312913656
     */
    virtual void handleInsidePortal(class BlockPos const &);
    /**
     * @vftbl  177
     * @symbol ?getPortalCooldown@Actor@@UEBAHXZ
     * @hash   -1471427533
     */
    virtual int getPortalCooldown() const;
    /**
     * @vftbl  178
     * @symbol ?getPortalWaitTime@Actor@@UEBAHXZ
     * @hash   268387466
     */
    virtual int getPortalWaitTime() const;
    /**
     * @vftbl  179
     * @symbol ?getDimensionId@Actor@@UEBA?AV?$AutomaticID@VDimension@@H@@XZ
     * @hash   -34261534
     */
    virtual class AutomaticID<class Dimension, int> getDimensionId() const;
    /**
     * @vftbl  180
     * @symbol ?canChangeDimensionsUsingPortal@Actor@@UEBA_NXZ
     * @hash   -737163850
     */
    virtual bool canChangeDimensionsUsingPortal() const;
    /**
     * @vftbl  181
     * @hash   1511261978
     */
    virtual void __unk_vfn_181();
    /**
     * @vftbl  182
     * @symbol ?changeDimension@Actor@@UEAAXV?$AutomaticID@VDimension@@H@@@Z
     * @hash   -506406600
     */
    virtual void changeDimension(class AutomaticID<class Dimension, int>);
    /**
     * @vftbl  183
     * @symbol ?getControllingPlayer@Actor@@UEBA?AUActorUniqueID@@XZ
     * @hash   -1636813294
     */
    virtual struct ActorUniqueID getControllingPlayer() const;
    /**
     * @vftbl  184
     * @symbol ?checkFallDamage@Actor@@UEAAXM_N@Z
     * @hash   895575278
     */
    virtual void checkFallDamage(float, bool);
    /**
     * @vftbl  185
     * @symbol ?causeFallDamage@Actor@@UEAAXMMVActorDamageSource@@@Z
     * @hash   1866490519
     */
    virtual void causeFallDamage(float, float, class ActorDamageSource);
    /**
     * @vftbl  186
     * @symbol ?handleFallDistanceOnServer@Actor@@UEAAXMM_N@Z
     * @hash   269091568
     */
    virtual void handleFallDistanceOnServer(float, float, bool);
    /**
     * @vftbl  187
     * @symbol ?playSynchronizedSound@Actor@@UEAAXW4LevelSoundEvent@@AEBVVec3@@AEBVBlock@@_N@Z
     * @hash   1236622512
     */
    virtual void playSynchronizedSound(enum class LevelSoundEvent, class Vec3 const &, class Block const &, bool);
    /**
     * @vftbl  188
     * @symbol ?playSynchronizedSound@Actor@@UEAAXW4LevelSoundEvent@@AEBVVec3@@H_N@Z
     * @hash   829392109
     */
    virtual void playSynchronizedSound(enum class LevelSoundEvent, class Vec3 const &, int, bool);
    /**
     * @vftbl  189
     * @symbol ?onSynchedFlagUpdate@Actor@@UEAAXH_J0@Z
     * @hash   -1856410957
     */
    virtual void onSynchedFlagUpdate(int, __int64, __int64);
    /**
     * @vftbl  190
     * @symbol ?onSynchedDataUpdate@Actor@@UEAAXH@Z
     * @hash   -1613480691
     */
    virtual void onSynchedDataUpdate(int);
    /**
     * @vftbl  191
     * @symbol ?canAddPassenger@Actor@@UEBA_NAEAV1@@Z
     * @hash   1021289809
     */
    virtual bool canAddPassenger(class Actor &) const;
    /**
     * @vftbl  192
     * @symbol ?canPickupItem@Actor@@UEBA_NAEBVItemStack@@@Z
     * @hash   1368391776
     */
    virtual bool canPickupItem(class ItemStack const &) const;
    /**
     * @vftbl  193
     * @symbol ?canBePulledIntoVehicle@Actor@@UEBA_NXZ
     * @hash   816697464
     */
    virtual bool canBePulledIntoVehicle() const;
    /**
     * @vftbl  194
     * @symbol ?inCaravan@Actor@@UEBA_NXZ
     * @hash   -127648300
     */
    virtual bool inCaravan() const;
    /**
     * @vftbl  195
     * @hash   1593557213
     */
    virtual void __unk_vfn_195();
    /**
     * @vftbl  196
     * @symbol ?tickLeash@Actor@@UEAAXXZ
     * @hash   -1766632014
     */
    virtual void tickLeash();
    /**
     * @vftbl  197
     * @symbol ?sendMotionPacketIfNeeded@Actor@@UEAAXXZ
     * @hash   1631352442
     */
    virtual void sendMotionPacketIfNeeded();
    /**
     * @vftbl  198
     * @symbol ?canSynchronizeNewEntity@Actor@@UEBA_NXZ
     * @hash   -1053553706
     */
    virtual bool canSynchronizeNewEntity() const;
    /**
     * @vftbl  199
     * @symbol ?stopRiding@Actor@@UEAAX_N00@Z
     * @hash   923350003
     */
    virtual void stopRiding(bool, bool, bool);
    /**
     * @vftbl  200
     * @symbol ?startSwimming@Actor@@UEAAXXZ
     * @hash   933682465
     */
    virtual void startSwimming();
    /**
     * @vftbl  201
     * @symbol ?stopSwimming@Actor@@UEAAXXZ
     * @hash   1757158369
     */
    virtual void stopSwimming();
    /**
     * @vftbl  202
     * @symbol ?buildDebugInfo@Actor@@UEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -257127159
     */
    virtual void buildDebugInfo(std::string &) const;
    /**
     * @vftbl  203
     * @symbol ?getCommandPermissionLevel@Actor@@UEBA?AW4CommandPermissionLevel@@XZ
     * @hash   -2002907471
     */
    virtual enum class CommandPermissionLevel getCommandPermissionLevel() const;
    /**
     * @vftbl  204
     * @symbol ?isClientSide@Actor@@UEBA_NXZ
     * @hash   461302559
     */
    virtual bool isClientSide() const;
    /**
     * @vftbl  205
     * @symbol ?getMutableAttribute@Actor@@UEAAPEAVAttributeInstance@@AEBVAttribute@@@Z
     * @hash   -748900014
     */
    virtual class AttributeInstance * getMutableAttribute(class Attribute const &);
    /**
     * @vftbl  206
     * @symbol ?getAttribute@Actor@@UEBAAEBVAttributeInstance@@AEBVAttribute@@@Z
     * @hash   1806873398
     */
    virtual class AttributeInstance const & getAttribute(class Attribute const &) const;
    /**
     * @vftbl  207
     * @symbol ?getDeathTime@Actor@@UEBAHXZ
     * @hash   -1489726031
     */
    virtual int getDeathTime() const;
    /**
     * @vftbl  208
     * @symbol ?heal@Actor@@UEAAXH@Z
     * @hash   128938901
     */
    virtual void heal(int);
    /**
     * @vftbl  209
     * @symbol ?isInvertedHealAndHarm@Actor@@UEBA_NXZ
     * @hash   -1571979273
     */
    virtual bool isInvertedHealAndHarm() const;
    /**
     * @vftbl  210
     * @symbol ?canBeAffected@Actor@@UEBA_NI@Z
     * @hash   -3183602
     */
    virtual bool canBeAffected(unsigned int) const;
    /**
     * @vftbl  211
     * @symbol ?canBeAffectedByArrow@Actor@@UEBA_NAEBVMobEffectInstance@@@Z
     * @hash   -36731245
     */
    virtual bool canBeAffectedByArrow(class MobEffectInstance const &) const;
    /**
     * @vftbl  212
     * @symbol ?onEffectAdded@Actor@@UEAAXAEAVMobEffectInstance@@@Z
     * @hash   -2082079292
     */
    virtual void onEffectAdded(class MobEffectInstance &);
    /**
     * @vftbl  213
     * @symbol ?onEffectUpdated@Actor@@UEAAXAEAVMobEffectInstance@@@Z
     * @hash   945168249
     */
    virtual void onEffectUpdated(class MobEffectInstance &);
    /**
     * @vftbl  214
     * @symbol ?onEffectRemoved@Actor@@UEAAXAEAVMobEffectInstance@@@Z
     * @hash   1054945364
     */
    virtual void onEffectRemoved(class MobEffectInstance &);
    /**
     * @vftbl  215
     * @symbol ?canObstructSpawningAndBlockPlacement@Actor@@UEBA_NXZ
     * @hash   -392487533
     */
    virtual bool canObstructSpawningAndBlockPlacement() const;
    /**
     * @vftbl  216
     * @symbol ?getAnimationComponent@Actor@@UEAAAEAVAnimationComponent@@XZ
     * @hash   1674659202
     */
    virtual class AnimationComponent & getAnimationComponent();
    /**
     * @vftbl  217
     * @symbol ?openContainerComponent@Actor@@UEAAXAEAVPlayer@@@Z
     * @hash   476293979
     */
    virtual void openContainerComponent(class Player &);
    /**
     * @vftbl  218
     * @symbol ?swing@Actor@@UEAAXXZ
     * @hash   595726640
     */
    virtual void swing();
    /**
     * @vftbl  219
     * @symbol ?useItem@Actor@@UEAAXAEAVItemStackBase@@W4ItemUseMethod@@_N@Z
     * @hash   964909553
     */
    virtual void useItem(class ItemStackBase &, enum class ItemUseMethod, bool);
    /**
     * @vftbl  220
     * @hash   -2032751088
     */
    virtual void __unk_vfn_220();
    /**
     * @vftbl  221
     * @hash   -2018004543
     */
    virtual void __unk_vfn_221();
    /**
     * @vftbl  222
     * @symbol ?getDebugText@Actor@@UEAAXAEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
     * @hash   1887100318
     */
    virtual void getDebugText(std::vector<std::string> &);
    /**
     * @vftbl  223
     * @symbol ?getMapDecorationRotation@Actor@@UEBAMXZ
     * @hash   -1241724307
     */
    virtual float getMapDecorationRotation() const;
    /**
     * @vftbl  224
     * @symbol ?getPassengerYRotation@Actor@@UEBAMAEBV1@@Z
     * @hash   -26829074
     */
    virtual float getPassengerYRotation(class Actor const &) const;
    /**
     * @vftbl  225
     * @symbol ?getYHeadRot@Actor@@UEBAMXZ
     * @hash   -463508755
     */
    virtual float getYHeadRot() const;
    /**
     * @vftbl  226
     * @symbol ?setYHeadRot@Actor@@UEAAXM@Z
     * @hash   202504816
     */
    virtual void setYHeadRot(float);
    /**
     * @vftbl  227
     * @symbol ?getYHeadRotO@Actor@@UEBAMXZ
     * @hash   1795438708
     */
    virtual float getYHeadRotO() const;
    /**
     * @vftbl  228
     * @symbol ?setYHeadRotO@Actor@@UEAAXM@Z
     * @hash   -820458399
     */
    virtual void setYHeadRotO(float);
    /**
     * @vftbl  229
     * @symbol ?isWorldBuilder@Actor@@UEBA_NXZ
     * @hash   -1356300618
     */
    virtual bool isWorldBuilder() const;
    /**
     * @vftbl  230
     * @symbol ?isCreative@Actor@@UEBA_NXZ
     * @hash   1853726076
     */
    virtual bool isCreative() const;
    /**
     * @vftbl  231
     * @symbol ?isAdventure@Actor@@UEBA_NXZ
     * @hash   -1688465687
     */
    virtual bool isAdventure() const;
    /**
     * @vftbl  232
     * @symbol ?isSurvival@Actor@@UEBA_NXZ
     * @hash   458523163
     */
    virtual bool isSurvival() const;
    /**
     * @vftbl  233
     * @symbol ?isSpectator@Actor@@UEBA_NXZ
     * @hash   -1706282712
     */
    virtual bool isSpectator() const;
    /**
     * @vftbl  234
     * @symbol ?isAttackableGamemode@Actor@@UEBA_NXZ
     * @hash   -2007302476
     */
    virtual bool isAttackableGamemode() const;
    /**
     * @vftbl  235
     * @symbol ?add@Actor@@UEAA_NAEAVItemStack@@@Z
     * @hash   511489938
     */
    virtual bool add(class ItemStack &);
    /**
     * @vftbl  236
     * @symbol ?drop@Actor@@UEAA_NAEBVItemStack@@_N@Z
     * @hash   -1029130325
     */
    virtual bool drop(class ItemStack const &, bool);
    /**
     * @vftbl  237
     * @symbol ?getInteraction@Actor@@UEAA_NAEAVPlayer@@AEAVActorInteraction@@AEBVVec3@@@Z
     * @hash   1529335662
     */
    virtual bool getInteraction(class Player &, class ActorInteraction &, class Vec3 const &);
    /**
     * @vftbl  238
     * @symbol ?canDestroyBlock@Actor@@UEBA_NAEBVBlock@@@Z
     * @hash   1305281540
     */
    virtual bool canDestroyBlock(class Block const &) const;
    /**
     * @vftbl  239
     * @symbol ?setAuxValue@Actor@@UEAAXH@Z
     * @hash   596262766
     */
    virtual void setAuxValue(int);
    /**
     * @vftbl  240
     * @symbol ?setSize@Actor@@UEAAXMM@Z
     * @hash   1511206485
     */
    virtual void setSize(float, float);
    /**
     * @vftbl  241
     * @symbol ?onOrphan@Actor@@UEAAXXZ
     * @hash   -502808119
     */
    virtual void onOrphan();
    /**
     * @vftbl  242
     * @symbol ?wobble@Actor@@UEAAXXZ
     * @hash   -902618941
     */
    virtual void wobble();
    /**
     * @vftbl  243
     * @symbol ?wasHurt@Actor@@UEAA_NXZ
     * @hash   -1273803860
     */
    virtual bool wasHurt();
    /**
     * @vftbl  244
     * @symbol ?startSpinAttack@Actor@@UEAAXXZ
     * @hash   -528820994
     */
    virtual void startSpinAttack();
    /**
     * @vftbl  245
     * @symbol ?stopSpinAttack@Actor@@UEAAXXZ
     * @hash   -211773314
     */
    virtual void stopSpinAttack();
    /**
     * @vftbl  246
     * @symbol ?setDamageNearbyMobs@Actor@@UEAAX_N@Z
     * @hash   911262199
     */
    virtual void setDamageNearbyMobs(bool);
    /**
     * @vftbl  247
     * @hash   -2005177115
     */
    virtual void __unk_vfn_247();
    /**
     * @vftbl  248
     * @symbol ?reloadLootTable@Actor@@UEAAXXZ
     * @hash   743236895
     */
    virtual void reloadLootTable();
    /**
     * @vftbl  249
     * @symbol ?reloadLootTable@Actor@@UEAAXAEBUEquipmentTableDefinition@@@Z
     * @hash   464439772
     */
    virtual void reloadLootTable(struct EquipmentTableDefinition const &);
    /**
     * @vftbl  250
     * @hash   -739509363
     */
    virtual void __unk_vfn_250();
    /**
     * @vftbl  251
     * @symbol ?kill@Actor@@UEAAXXZ
     * @hash   988575888
     */
    virtual void kill();
    /**
     * @vftbl  252
     * @symbol ?die@Actor@@UEAAXAEBVActorDamageSource@@@Z
     * @hash   -313889960
     */
    virtual void die(class ActorDamageSource const &);
    /**
     * @vftbl  253
     * @symbol ?shouldDropDeathLoot@Actor@@UEBA_NXZ
     * @hash   -1241558227
     */
    virtual bool shouldDropDeathLoot() const;
    /**
     * @vftbl  254
     * @symbol ?shouldTick@Actor@@UEBA_NXZ
     * @hash   1766685395
     */
    virtual bool shouldTick() const;
    /**
     * @vftbl  255
     * @symbol ?applySnapshot@Actor@@UEAAXAEBVEntityContext@@0@Z
     * @hash   -904097212
     */
    virtual void applySnapshot(class EntityContext const &, class EntityContext const &);
    /**
     * @vftbl  256
     * @symbol ?getNextStep@Actor@@UEAAMM@Z
     * @hash   1120938083
     */
    virtual float getNextStep(float);
    /**
     * @vftbl  257
     * @symbol ?getLootTable@Actor@@UEAAPEAVLootTable@@XZ
     * @hash   -1431643142
     */
    virtual class LootTable * getLootTable();
    /**
     * @vftbl  258
     * @symbol ?interpolatorTick@Actor@@UEAAXXZ
     * @hash   -2077536042
     */
    virtual void interpolatorTick();
    /**
     * @vftbl  259
     * @symbol ?onPush@Actor@@UEAAXAEAV1@@Z
     * @hash   -324880540
     */
    virtual void onPush(class Actor &);
    /**
     * @vftbl  260
     * @symbol ?getLastDeathPos@Actor@@UEBA?AV?$optional@VBlockPos@@@std@@XZ
     * @hash   2067795728
     */
    virtual class std::optional<class BlockPos> getLastDeathPos() const;
    /**
     * @vftbl  261
     * @symbol ?getLastDeathDimension@Actor@@UEBA?AV?$optional@V?$AutomaticID@VDimension@@H@@@std@@XZ
     * @hash   1821989388
     */
    virtual class std::optional<class AutomaticID<class Dimension, int>> getLastDeathDimension() const;
    /**
     * @vftbl  262
     * @symbol ?hasDiedBefore@Actor@@UEBA_NXZ
     * @hash   11420672
     */
    virtual bool hasDiedBefore() const;
    /**
     * @vftbl  263
     * @symbol ?doWaterSplashEffect@Actor@@UEAAXXZ
     * @hash   -1115985898
     */
    virtual void doWaterSplashEffect();
    /**
     * @vftbl  264
     * @symbol ?_shouldProvideFeedbackOnHandContainerItemSet@Actor@@MEBA_NW4HandSlot@@AEBVItemStack@@@Z
     * @hash   2141986121
     */
    virtual bool _shouldProvideFeedbackOnHandContainerItemSet(enum class HandSlot, class ItemStack const &) const;
    /**
     * @vftbl  265
     * @symbol ?_shouldProvideFeedbackOnArmorSet@Actor@@MEBA_NW4ArmorSlot@@AEBVItemStack@@@Z
     * @hash   -579830311
     */
    virtual bool _shouldProvideFeedbackOnArmorSet(enum class ArmorSlot, class ItemStack const &) const;
    /**
     * @vftbl  266
     * @symbol ?updateEntitySpecificMolangVariables@Actor@@MEAAXAEAVRenderParams@@@Z
     * @hash   -2030960700
     */
    virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /**
     * @vftbl  267
     * @symbol ?shouldTryMakeStepSound@Actor@@MEAA_NXZ
     * @hash   -1394001078
     */
    virtual bool shouldTryMakeStepSound();
    /**
     * @vftbl  268
     * @hash   -1904234636
     */
    virtual void __unk_vfn_268();
    /**
     * @vftbl  269
     * @symbol ?_hurt@Actor@@MEAA_NAEBVActorDamageSource@@M_N1@Z
     * @hash   1685088779
     */
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /**
     * @vftbl  270
     * @symbol ?markHurt@Actor@@MEAAXXZ
     * @hash   2068555799
     */
    virtual void markHurt();
    /**
     * @vftbl  271
     * @symbol ?_getAnimationComponent@Actor@@MEAAAEAVAnimationComponent@@AEAV?$shared_ptr@VAnimationComponent@@@std@@W4AnimationComponentGroupType@@@Z
     * @hash   -1840015110
     */
    virtual class AnimationComponent & _getAnimationComponent(class std::shared_ptr<class AnimationComponent> &, enum class AnimationComponentGroupType);
    /**
     * @vftbl  272
     * @symbol ?readAdditionalSaveData@Actor@@MEAAXAEBVCompoundTag@@AEAVDataLoadHelper@@@Z
     * @hash   845258763
     */
    virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /**
     * @vftbl  273
     * @symbol ?addAdditionalSaveData@Actor@@MEBAXAEAVCompoundTag@@@Z
     * @hash   -805623278
     */
    virtual void addAdditionalSaveData(class CompoundTag &) const;
    /**
     * @vftbl  274
     * @symbol ?_playStepSound@Actor@@MEAAXAEBVBlockPos@@AEBVBlock@@@Z
     * @hash   671662941
     */
    virtual void _playStepSound(class BlockPos const &, class Block const &);
    /**
     * @vftbl  275
     * @symbol ?_playFlySound@Actor@@MEAAXAEBVBlockPos@@AEBVBlock@@@Z
     * @hash   934435212
     */
    virtual void _playFlySound(class BlockPos const &, class Block const &);
    /**
     * @vftbl  276
     * @hash   -1870241183
     */
    virtual void __unk_vfn_276();
    /**
     * @vftbl  277
     * @symbol ?checkInsideBlocks@Actor@@MEAAXM@Z
     * @hash   945684253
     */
    virtual void checkInsideBlocks(float);
    /**
     * @vftbl  278
     * @symbol ?pushOutOfBlocks@Actor@@MEAAXAEBVVec3@@@Z
     * @hash   -1006497706
     */
    virtual void pushOutOfBlocks(class Vec3 const &);
    /**
     * @vftbl  279
     * @symbol ?spawnTrailBubbles@Actor@@MEAAXXZ
     * @hash   163220679
     */
    virtual void spawnTrailBubbles();
    /**
     * @vftbl  280
     * @symbol ?updateInsideBlock@Actor@@MEAAXXZ
     * @hash   610196627
     */
    virtual void updateInsideBlock();
    /**
     * @vftbl  281
     * @symbol ?_removePassenger@Actor@@MEAAXAEBUActorUniqueID@@_N11@Z
     * @hash   834933107
     */
    virtual void _removePassenger(struct ActorUniqueID const &, bool, bool, bool);
    /**
     * @vftbl  282
     * @symbol ?_onSizeUpdated@Actor@@EEAAXXZ
     * @hash   -742435872
     */
    virtual void _onSizeUpdated();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ACTOR
    /**
     * @symbol ?_doAutoAttackOnTouch@Actor@@EEAAXAEAV1@@Z
     * @hash   2018803852
     */
    MCVAPI void _doAutoAttackOnTouch(class Actor &);
    /**
     * @symbol ?_makeFlySound@Actor@@MEBA_NXZ
     * @hash   152073733
     */
    MCVAPI bool _makeFlySound() const;
    /**
     * @symbol ?breaksFallingBlocks@Actor@@UEBA_NXZ
     * @hash   773805756
     */
    MCVAPI bool breaksFallingBlocks() const;
    /**
     * @symbol ?canExistInPeaceful@Actor@@UEBA_NXZ
     * @hash   1406536046
     */
    MCVAPI bool canExistInPeaceful() const;
    /**
     * @symbol ?canInteractWithOtherEntitiesInGame@Actor@@UEBA_NXZ
     * @hash   -217478801
     */
    MCVAPI bool canInteractWithOtherEntitiesInGame() const;
    /**
     * @symbol ?canMakeStepSound@Actor@@MEBA_NXZ
     * @hash   827473169
     */
    MCVAPI bool canMakeStepSound() const;
    /**
     * @symbol ?canSeeInvisible@Actor@@UEBA_NXZ
     * @hash   1097253101
     */
    MCVAPI bool canSeeInvisible() const;
    /**
     * @symbol ?changeDimension@Actor@@UEAAXAEBVChangeDimensionPacket@@@Z
     * @hash   -194256925
     */
    MCVAPI void changeDimension(class ChangeDimensionPacket const &);
    /**
     * @symbol ?getAlwaysShowNameTag@Actor@@UEBA_NXZ
     * @hash   -32446448
     */
    MCVAPI bool getAlwaysShowNameTag() const;
    /**
     * @symbol ?getDeletionDelayTimeSeconds@Actor@@UEBAMXZ
     * @hash   1739196364
     */
    MCVAPI float getDeletionDelayTimeSeconds() const;
    /**
     * @symbol ?getOutputSignal@Actor@@UEBAHXZ
     * @hash   -379935291
     */
    MCVAPI int getOutputSignal() const;
    /**
     * @symbol ?hasOutputSignal@Actor@@UEBA_NE@Z
     * @hash   -807829067
     */
    MCVAPI bool hasOutputSignal(unsigned char) const;
    /**
     * @symbol ?interactPreventDefault@Actor@@UEAA_NXZ
     * @hash   2009764131
     */
    MCVAPI bool interactPreventDefault();
    /**
     * @symbol ?isCreativeModeAllowed@Actor@@UEAA_NXZ
     * @hash   -1193383632
     */
    MCVAPI bool isCreativeModeAllowed();
    /**
     * @symbol ?isFishable@Actor@@UEBA_NXZ
     * @hash   650398479
     */
    MCVAPI bool isFishable() const;
    /**
     * @symbol ?isLeashableType@Actor@@UEAA_NXZ
     * @hash   -582137525
     */
    MCVAPI bool isLeashableType();
    /**
     * @symbol ?isLocalPlayer@Actor@@UEBA_NXZ
     * @hash   -1254401531
     */
    MCVAPI bool isLocalPlayer() const;
    /**
     * @symbol ?isPlayer@Actor@@UEBA_NXZ
     * @hash   1724815470
     */
    MCVAPI bool isPlayer() const;
    /**
     * @symbol ?isShootable@Actor@@UEAA_NXZ
     * @hash   -1486028237
     */
    MCVAPI bool isShootable();
    /**
     * @symbol ?isTargetable@Actor@@UEBA_NXZ
     * @hash   -927735320
     */
    MCVAPI bool isTargetable() const;
    /**
     * @symbol ?renderDebugServerState@Actor@@UEAAXAEBVOptions@@@Z
     * @hash   1732003112
     */
    MCVAPI void renderDebugServerState(class Options const &);
#endif
    /**
     * @symbol ??0Actor@@QEAA@PEAVActorDefinitionGroup@@AEBUActorDefinitionIdentifier@@AEAVEntityContext@@@Z
     * @hash   -2115232335
     */
    MCAPI Actor(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    /**
     * @symbol ??0Actor@@QEAA@AEAVILevel@@AEAVEntityContext@@@Z
     * @hash   -1468115897
     */
    MCAPI Actor(class ILevel &, class EntityContext &);
    /**
     * @symbol ?_randomHeartPos@Actor@@QEAA?AVVec3@@XZ
     * @hash   -1229607292
     */
    MCAPI class Vec3 _randomHeartPos();
    /**
     * @symbol ?_sendDirtyActorData@Actor@@QEAAXXZ
     * @hash   1666347037
     */
    MCAPI void _sendDirtyActorData();
    /**
     * @symbol ?_setActorTypeId@Actor@@QEAAXW4ActorType@@@Z
     * @hash   47772202
     */
    MCAPI void _setActorTypeId(enum class ActorType);
    /**
     * @symbol ?_setLevelPtr@Actor@@QEAAXPEAVLevel@@@Z
     * @hash   -347119871
     */
    MCAPI void _setLevelPtr(class Level *);
    /**
     * @symbol ?addCategory@Actor@@QEAAXAEBW4ActorCategory@@@Z
     * @hash   958462808
     */
    MCAPI void addCategory(enum class ActorCategory const &);
    /**
     * @symbol ?addDefinitionGroup@Actor@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -1248528824
     */
    MCAPI void addDefinitionGroup(std::string const &);
    /**
     * @symbol ?addEffect@Actor@@QEAAXAEBVMobEffectInstance@@@Z
     * @hash   2062501488
     */
    MCAPI void addEffect(class MobEffectInstance const &);
    /**
     * @symbol ?addTag@Actor@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -1129786581
     */
    MCAPI bool addTag(std::string const &);
    /**
     * @symbol ?buildDebugGroupInfo@Actor@@QEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   966785904
     */
    MCAPI void buildDebugGroupInfo(std::string &) const;
    /**
     * @symbol ?buildForward@Actor@@QEBA?AVVec3@@XZ
     * @hash   204092510
     */
    MCAPI class Vec3 buildForward() const;
    /**
     * @symbol ?burn@Actor@@QEAAXH_N@Z
     * @hash   -1650795911
     */
    MCAPI void burn(int, bool);
    /**
     * @symbol ?cacheComponentData@Actor@@QEAAXXZ
     * @hash   170164941
     */
    MCAPI void cacheComponentData();
    /**
     * @symbol ?calcCenterPos@Actor@@QEBA?AVVec3@@XZ
     * @hash   -1404480746
     */
    MCAPI class Vec3 calcCenterPos() const;
    /**
     * @symbol ?calculateAttackDamage@Actor@@QEAAMAEAV1@@Z
     * @hash   -192701515
     */
    MCAPI float calculateAttackDamage(class Actor &);
    /**
     * @symbol ?canAscendCurrentBlockByJumping@Actor@@QEBA_NXZ
     * @hash   -1144061354
     */
    MCAPI bool canAscendCurrentBlockByJumping() const;
    /**
     * @symbol ?canBeginOrContinueClimbingLadder@Actor@@QEBA_NXZ
     * @hash   -821044058
     */
    MCAPI bool canBeginOrContinueClimbingLadder() const;
    /**
     * @symbol ?canCurrentlySwim@Actor@@QEBA_NXZ
     * @hash   -1583802506
     */
    MCAPI bool canCurrentlySwim() const;
    /**
     * @symbol ?canDescendBlockBelowByCrouching@Actor@@QEBA_NXZ
     * @hash   1914694788
     */
    MCAPI bool canDescendBlockBelowByCrouching() const;
    /**
     * @symbol ?canFly@Actor@@QEBA_NXZ
     * @hash   -277760650
     */
    MCAPI bool canFly() const;
    /**
     * @symbol ?canMate@Actor@@QEBA_NAEBV1@@Z
     * @hash   -375106047
     */
    MCAPI bool canMate(class Actor const &) const;
    /**
     * @symbol ?canReceiveMobEffectsFromGameplay@Actor@@QEBA_NXZ
     * @hash   1996470838
     */
    MCAPI bool canReceiveMobEffectsFromGameplay() const;
    /**
     * @symbol ?canSeeDaylight@Actor@@QEBA_NXZ
     * @hash   -1289956826
     */
    MCAPI bool canSeeDaylight() const;
    /**
     * @symbol ?celebrateHunt@Actor@@QEAAXH_N@Z
     * @hash   -1699753
     */
    MCAPI void celebrateHunt(int, bool);
    /**
     * @symbol ?checkInsideCauldron@Actor@@QEAAXXZ
     * @hash   -1073443807
     */
    MCAPI void checkInsideCauldron();
    /**
     * @symbol ?clearFishingHookID@Actor@@QEAAXXZ
     * @hash   888758377
     */
    MCAPI void clearFishingHookID();
    /**
     * @symbol ?closerThan@Actor@@QEBA_NAEBV1@M@Z
     * @hash   1592432104
     */
    MCAPI bool closerThan(class Actor const &, float) const;
    /**
     * @symbol ?closerThan@Actor@@QEBA_NAEBV1@MM@Z
     * @hash   64103719
     */
    MCAPI bool closerThan(class Actor const &, float, float) const;
    /**
     * @symbol ?consumeItem@Actor@@QEAAXAEAVItemActor@@H@Z
     * @hash   602503345
     */
    MCAPI void consumeItem(class ItemActor &, int);
    /**
     * @symbol ?createUpdateEquipPacket@Actor@@QEAA?AVUpdateEquipPacket@@H@Z
     * @hash   -864709533
     */
    MCAPI class UpdateEquipPacket createUpdateEquipPacket(int);
    /**
     * @symbol ?createUpdateTradePacket@Actor@@QEAA?AVUpdateTradePacket@@H@Z
     * @hash   -1445451829
     */
    MCAPI class UpdateTradePacket createUpdateTradePacket(int);
    /**
     * @symbol ?damageSensorComponentHurt@Actor@@QEAA_NAEAMAEBVActorDamageSource@@_N@Z
     * @hash   2105930972
     */
    MCAPI bool damageSensorComponentHurt(float &, class ActorDamageSource const &, bool);
    /**
     * @symbol ?deregisterTagsFromLevelCache@Actor@@QEAAXXZ
     * @hash   -190015683
     */
    MCAPI void deregisterTagsFromLevelCache();
    /**
     * @symbol ?distanceSqrToBlockPosCenter@Actor@@QEBAMAEBVBlockPos@@@Z
     * @hash   436277767
     */
    MCAPI float distanceSqrToBlockPosCenter(class BlockPos const &) const;
    /**
     * @symbol ?distanceTo@Actor@@QEBAMAEBVVec3@@@Z
     * @hash   -1231050715
     */
    MCAPI float distanceTo(class Vec3 const &) const;
    /**
     * @symbol ?distanceTo@Actor@@QEBAMAEBV1@@Z
     * @hash   -1337842321
     */
    MCAPI float distanceTo(class Actor const &) const;
    /**
     * @symbol ?distanceToSqr@Actor@@QEBAMAEBV1@@Z
     * @hash   508219121
     */
    MCAPI float distanceToSqr(class Actor const &) const;
    /**
     * @symbol ?distanceToSqr@Actor@@QEBAMAEBVVec3@@@Z
     * @hash   -317027689
     */
    MCAPI float distanceToSqr(class Vec3 const &) const;
    /**
     * @symbol ?dropLeash@Actor@@QEAAX_N0@Z
     * @hash   -876380920
     */
    MCAPI void dropLeash(bool, bool);
    /**
     * @symbol ?dropTowards@Actor@@QEAAXAEBVItemStack@@VVec3@@@Z
     * @hash   1088839599
     */
    MCAPI void dropTowards(class ItemStack const &, class Vec3);
    /**
     * @symbol ?evaluateSeatRotation@Actor@@QEAAMAEBVRideableComponent@@@Z
     * @hash   -519393631
     */
    MCAPI float evaluateSeatRotation(class RideableComponent const &);
    /**
     * @symbol ?executeEvent@Actor@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVVariantParameterList@@@Z
     * @hash   -1969067304
     */
    MCAPI bool executeEvent(std::string const &, class VariantParameterList const &);
    /**
     * @symbol ?exitVehicle@Actor@@QEAAXAEBV1@P6A?AV?$optional@VVec3@@@std@@AEBUVehicleDirections@VehicleUtils@@V?$function@$$A6A_NAEBVVec3@@0@Z@3@@Z@Z
     * @hash   761222341
     */
    MCAPI void exitVehicle(class Actor const &, class std::optional<class Vec3> ( *)(struct VehicleUtils::VehicleDirections const &, class std::function<bool (class Vec3 const &, class Vec3 const &)>));
    /**
     * @symbol ?fetchFishingHook@Actor@@QEAAPEAVFishingHook@@XZ
     * @hash   -817496369
     */
    MCAPI class FishingHook * fetchFishingHook();
    /**
     * @symbol ?fetchNearbyActorsSorted@Actor@@QEAA?AV?$vector@UDistanceSortedActor@@V?$allocator@UDistanceSortedActor@@@std@@@std@@AEBVVec3@@W4ActorType@@@Z
     * @hash   -1224357424
     */
    MCAPI std::vector<struct DistanceSortedActor> fetchNearbyActorsSorted(class Vec3 const &, enum class ActorType);
    /**
     * @symbol ?forEachLeashedActor@Actor@@QEAAXV?$function@$$A6AXV?$not_null@PEAVActor@@@gsl@@@Z@std@@@Z
     * @hash   -568323131
     */
    MCAPI void forEachLeashedActor(class std::function<void (class gsl::not_null<class Actor *>)>);
    /**
     * @symbol ?getAABB@Actor@@QEBAAEBVAABB@@XZ
     * @hash   1868548736
     */
    MCAPI class AABB const & getAABB() const;
    /**
     * @symbol ?getAABBDim@Actor@@QEBAAEBVVec2@@XZ
     * @hash   -125172554
     */
    MCAPI class Vec2 const & getAABBDim() const;
    /**
     * @symbol ?getActiveEffectCount@Actor@@QEBAHXZ
     * @hash   1222533802
     */
    MCAPI int getActiveEffectCount() const;
    /**
     * @symbol ?getActorIdentifier@Actor@@QEBAAEBUActorDefinitionIdentifier@@XZ
     * @hash   718069744
     */
    MCAPI struct ActorDefinitionIdentifier const & getActorIdentifier() const;
    /**
     * @symbol ?getAllEffects@Actor@@QEBAAEBV?$vector@VMobEffectInstance@@V?$allocator@VMobEffectInstance@@@std@@@std@@XZ
     * @hash   1285700548
     */
    MCAPI std::vector<class MobEffectInstance> const & getAllEffects() const;
    /**
     * @symbol ?getArmorContainer@Actor@@QEAAAEAVSimpleContainer@@XZ
     * @hash   1128778858
     */
    MCAPI class SimpleContainer & getArmorContainer();
    /**
     * @symbol ?getArmorContainer@Actor@@QEBAAEBVSimpleContainer@@XZ
     * @hash   -1825665052
     */
    MCAPI class SimpleContainer const & getArmorContainer() const;
    /**
     * @symbol ?getAttributes@Actor@@QEAA?AV?$not_null@PEAVBaseAttributeMap@@@gsl@@XZ
     * @hash   231582097
     */
    MCAPI class gsl::not_null<class BaseAttributeMap *> getAttributes();
    /**
     * @symbol ?getAttributes@Actor@@QEBA?AV?$not_null@PEBVBaseAttributeMap@@@gsl@@XZ
     * @hash   2147193285
     */
    MCAPI class gsl::not_null<class BaseAttributeMap const *> getAttributes() const;
    /**
     * @symbol ?getBlockPosCurrentlyStandingOn@Actor@@QEBA?AVBlockPos@@PEBV1@@Z
     * @hash   -1537975710
     */
    MCAPI class BlockPos getBlockPosCurrentlyStandingOn(class Actor const *) const;
    /**
     * @symbol ?getBlockTarget@Actor@@QEBA?AVBlockPos@@XZ
     * @hash   -1459485632
     */
    MCAPI class BlockPos getBlockTarget() const;
    /**
     * @symbol ?getCanPickupItems@Actor@@QEBA_NXZ
     * @hash   1805904052
     */
    MCAPI bool getCanPickupItems() const;
    /**
     * @symbol ?getCarriedItemInSlotPreferredBy@Actor@@QEBAAEBVItemStack@@AEBV2@@Z
     * @hash   -1293011680
     */
    MCAPI class ItemStack const & getCarriedItemInSlotPreferredBy(class ItemStack const &) const;
    /**
     * @symbol ?getCategories@Actor@@QEBA?AW4ActorCategory@@XZ
     * @hash   1174316456
     */
    MCAPI enum class ActorCategory getCategories() const;
    /**
     * @symbol ?getChainedDamageEffects@Actor@@QEBA_NXZ
     * @hash   -943430556
     */
    MCAPI bool getChainedDamageEffects() const;
    /**
     * @symbol ?getCollidableMobNear@Actor@@QEBA_NXZ
     * @hash   1103653958
     */
    MCAPI bool getCollidableMobNear() const;
    /**
     * @symbol ?getColor@Actor@@QEBA?AW4PaletteColor@@XZ
     * @hash   -1738928946
     */
    MCAPI enum class PaletteColor getColor() const;
    /**
     * @symbol ?getColor2@Actor@@QEBA?AW4PaletteColor@@XZ
     * @hash   1061075580
     */
    MCAPI enum class PaletteColor getColor2() const;
    /**
     * @symbol ?getControllingSeat@Actor@@QEBAHXZ
     * @hash   803810890
     */
    MCAPI int getControllingSeat() const;
    /**
     * @symbol ?getCurrentSwimAmount@Actor@@QEBAMXZ
     * @hash   863287802
     */
    MCAPI float getCurrentSwimAmount() const;
    /**
     * @symbol ?getDamageNearbyMobs@Actor@@QEBA_NXZ
     * @hash   -286117516
     */
    MCAPI bool getDamageNearbyMobs() const;
    /**
     * @symbol ?getDiffList@Actor@@QEBAPEBVActorDefinitionDiffList@@XZ
     * @hash   763336731
     */
    MCAPI class ActorDefinitionDiffList const * getDiffList() const;
    /**
     * @symbol ?getDiffListNonConst@Actor@@QEAAPEAVActorDefinitionDiffList@@XZ
     * @hash   752654349
     */
    MCAPI class ActorDefinitionDiffList * getDiffListNonConst();
    /**
     * @symbol ?getDimension@Actor@@QEBAAEAVDimension@@XZ
     * @hash   1867351160
     */
    MCAPI class Dimension & getDimension() const;
    /**
     * @symbol ?getDimensionConst@Actor@@QEBAAEBVDimension@@XZ
     * @hash   -1186276260
     */
    MCAPI class Dimension const & getDimensionConst() const;
    /**
     * @symbol ?getEconomyTradeableComponent@Actor@@QEBAPEAVEconomyTradeableComponent@@XZ
     * @hash   -1373855707
     */
    MCAPI class EconomyTradeableComponent * getEconomyTradeableComponent() const;
    /**
     * @symbol ?getEffect@Actor@@QEBAPEBVMobEffectInstance@@AEBVMobEffect@@@Z
     * @hash   967205824
     */
    MCAPI class MobEffectInstance const * getEffect(class MobEffect const &) const;
    /**
     * @symbol ?getEntityData@Actor@@QEAAAEAVSynchedActorDataEntityWrapper@@XZ
     * @hash   302345860
     */
    MCAPI class SynchedActorDataEntityWrapper & getEntityData();
    /**
     * @symbol ?getEntityData@Actor@@QEBAAEBVSynchedActorDataEntityWrapper@@XZ
     * @hash   524740606
     */
    MCAPI class SynchedActorDataEntityWrapper const & getEntityData() const;
    /**
     * @symbol ?getEntityRegistry@Actor@@QEAA?AV?$StackRefResultT@UEntityRegistryRefTraits@@@@XZ
     * @hash   -202487599
     */
    MCAPI class StackRefResultT<struct EntityRegistryRefTraits> getEntityRegistry();
    /**
     * @symbol ?getEntityTerrainInterlockData@Actor@@QEAAAEAVActorTerrainInterlockData@@XZ
     * @hash   -702629728
     */
    MCAPI class ActorTerrainInterlockData & getEntityTerrainInterlockData();
    /**
     * @symbol ?getEquipmentSlotForItem@Actor@@QEBA?AW4EquipmentSlot@@AEBVItemStack@@@Z
     * @hash   -1237424837
     */
    MCAPI enum class EquipmentSlot getEquipmentSlotForItem(class ItemStack const &) const;
    /**
     * @symbol ?getFirstAvailableSeatPos@Actor@@QEBA_NAEAV1@AEAVVec3@@@Z
     * @hash   1705095956
     */
    MCAPI bool getFirstAvailableSeatPos(class Actor &, class Vec3 &) const;
    /**
     * @symbol ?getFirstPassenger@Actor@@QEBAPEAV1@XZ
     * @hash   -1702548087
     */
    MCAPI class Actor * getFirstPassenger() const;
    /**
     * @symbol ?getHandContainer@Actor@@QEAAAEAVSimpleContainer@@XZ
     * @hash   1818484032
     */
    MCAPI class SimpleContainer & getHandContainer();
    /**
     * @symbol ?getHandContainer@Actor@@QEBAAEBVSimpleContainer@@XZ
     * @hash   -1135959878
     */
    MCAPI class SimpleContainer const & getHandContainer() const;
    /**
     * @symbol ?getHealth@Actor@@QEBAHXZ
     * @hash   -1725843716
     */
    MCAPI int getHealth() const;
    /**
     * @symbol ?getHurtDir@Actor@@QEBAHXZ
     * @hash   -1132820458
     */
    MCAPI int getHurtDir() const;
    /**
     * @symbol ?getHurtTime@Actor@@QEBAHXZ
     * @hash   -525910420
     */
    MCAPI int getHurtTime() const;
    /**
     * @symbol ?getInitializationMethod@Actor@@QEAA?AW4InitializationMethod@1@XZ
     * @hash   1707483222
     */
    MCAPI enum class Actor::InitializationMethod getInitializationMethod();
    /**
     * @symbol ?getInterpolatedPosition@Actor@@QEBA?AVVec3@@M@Z
     * @hash   -1684014015
     */
    MCAPI class Vec3 getInterpolatedPosition(float) const;
    /**
     * @symbol ?getInterpolatedRotation@Actor@@QEBA?AVVec2@@M@Z
     * @hash   -1387197787
     */
    MCAPI class Vec2 getInterpolatedRotation(float) const;
    /**
     * @symbol ?getIsExperienceDropEnabled@Actor@@QEBA_NXZ
     * @hash   -1996875898
     */
    MCAPI bool getIsExperienceDropEnabled() const;
    /**
     * @symbol ?getJumpDuration@Actor@@QEBAHXZ
     * @hash   -446562680
     */
    MCAPI int getJumpDuration() const;
    /**
     * @symbol ?getLastHurtByMobTime@Actor@@QEAAHXZ
     * @hash   -1887927330
     */
    MCAPI int getLastHurtByMobTime();
    /**
     * @symbol ?getLastHurtByMobTimestamp@Actor@@QEAAHXZ
     * @hash   -903787478
     */
    MCAPI int getLastHurtByMobTimestamp();
    /**
     * @symbol ?getLastHurtCause@Actor@@QEBA?AW4ActorDamageCause@@XZ
     * @hash   785627428
     */
    MCAPI enum class ActorDamageCause getLastHurtCause() const;
    /**
     * @symbol ?getLastHurtDamage@Actor@@QEBAMXZ
     * @hash   1689857386
     */
    MCAPI float getLastHurtDamage() const;
    /**
     * @symbol ?getLastHurtMobTimestamp@Actor@@QEAAHXZ
     * @hash   -493569972
     */
    MCAPI int getLastHurtMobTimestamp();
    /**
     * @symbol ?getLastHurtTimestamp@Actor@@QEBA_KXZ
     * @hash   -260266319
     */
    MCAPI unsigned __int64 getLastHurtTimestamp() const;
    /**
     * @symbol ?getLeashHolder@Actor@@QEBA?AUActorUniqueID@@XZ
     * @hash   -1599658280
     */
    MCAPI struct ActorUniqueID getLeashHolder() const;
    /**
     * @symbol ?getLevel@Actor@@QEAAAEAVLevel@@XZ
     * @hash   1160604506
     */
    MCAPI class Level & getLevel();
    /**
     * @symbol ?getLevel@Actor@@QEBAAEBVLevel@@XZ
     * @hash   -1112117228
     */
    MCAPI class Level const & getLevel() const;
    /**
     * @symbol ?getLevelTimeStamp@Actor@@QEBA_KXZ
     * @hash   1229677967
     */
    MCAPI unsigned __int64 getLevelTimeStamp() const;
    /**
     * @symbol ?getLimitedLifetimeTicks@Actor@@QEBAHXZ
     * @hash   2004448922
     */
    MCAPI int getLimitedLifetimeTicks() const;
    /**
     * @symbol ?getLinks@Actor@@QEBA?AV?$vector@UActorLink@@V?$allocator@UActorLink@@@std@@@std@@XZ
     * @hash   1548836724
     */
    MCAPI std::vector<struct ActorLink> getLinks() const;
    /**
     * @symbol ?getMarkVariant@Actor@@QEBAHXZ
     * @hash   856680250
     */
    MCAPI int getMarkVariant() const;
    /**
     * @symbol ?getMaxHealth@Actor@@QEBAHXZ
     * @hash   -63836166
     */
    MCAPI int getMaxHealth() const;
    /**
     * @symbol ?getMolangVariables@Actor@@QEAAAEAVMolangVariableMap@@XZ
     * @hash   1324363832
     */
    MCAPI class MolangVariableMap & getMolangVariables();
    /**
     * @symbol ?getMovementProxy@Actor@@QEAA?AV?$not_null@V?$shared_ptr@UIActorMovementProxy@@@std@@@gsl@@XZ
     * @hash   -1833318288
     */
    MCAPI class gsl::not_null<class std::shared_ptr<struct IActorMovementProxy>> getMovementProxy();
    /**
     * @symbol ?getMovementProxy@Actor@@QEBA?AV?$not_null@V?$shared_ptr@$$CBUIActorMovementProxy@@@std@@@gsl@@XZ
     * @hash   -1315035330
     */
    MCAPI class gsl::not_null<class std::shared_ptr<struct IActorMovementProxy const>> getMovementProxy() const;
    /**
     * @symbol ?getOffhandSlot@Actor@@QEBAAEBVItemStack@@XZ
     * @hash   -251435822
     */
    MCAPI class ItemStack const & getOffhandSlot() const;
    /**
     * @symbol ?getOnDeathExperience@Actor@@QEAAHXZ
     * @hash   -1536313782
     */
    MCAPI int getOnDeathExperience();
    /**
     * @symbol ?getOrAddDynamicProperties@Actor@@QEAAAEAVDynamicProperties@@XZ
     * @hash   562445896
     */
    MCAPI class DynamicProperties & getOrAddDynamicProperties();
    /**
     * @symbol ?getOwner@Actor@@QEBAPEAVMob@@XZ
     * @hash   -121246677
     */
    MCAPI class Mob * getOwner() const;
    /**
     * @symbol ?getOwnerId@Actor@@QEBA?BUActorUniqueID@@XZ
     * @hash   427741732
     */
    MCAPI struct ActorUniqueID const getOwnerId() const;
    /**
     * @symbol ?getPassengerIndex@Actor@@QEBAHAEBV1@@Z
     * @hash   918800825
     */
    MCAPI int getPassengerIndex(class Actor const &) const;
    /**
     * @symbol ?getPersistingTradeOffers@Actor@@QEAA?AV?$unique_ptr@VCompoundTag@@U?$default_delete@VCompoundTag@@@std@@@std@@XZ
     * @hash   341689402
     */
    MCAPI std::unique_ptr<class CompoundTag> getPersistingTradeOffers();
    /**
     * @symbol ?getPersistingTradeRiches@Actor@@QEAAHXZ
     * @hash   1328906364
     */
    MCAPI int getPersistingTradeRiches();
    /**
     * @symbol ?getPlayerOwner@Actor@@QEBAPEAVPlayer@@XZ
     * @hash   1155329293
     */
    MCAPI class Player * getPlayerOwner() const;
    /**
     * @symbol ?getPosDelta@Actor@@QEBAAEBVVec3@@XZ
     * @hash   -1705058222
     */
    MCAPI class Vec3 const & getPosDelta() const;
    /**
     * @symbol ?getPosDeltaNonConst@Actor@@QEAAAEAVVec3@@XZ
     * @hash   -497230764
     */
    MCAPI class Vec3 & getPosDeltaNonConst();
    /**
     * @symbol ?getRadius@Actor@@QEBAMXZ
     * @hash   447556758
     */
    MCAPI float getRadius() const;
    /**
     * @symbol ?getRandom@Actor@@QEBAAEAVRandom@@XZ
     * @hash   -1651228724
     */
    MCAPI class Random & getRandom() const;
    /**
     * @symbol ?getRegion@Actor@@QEBAAEAVBlockSource@@XZ
     * @hash   1117524026
     */
    MCAPI class BlockSource & getRegion() const;
    /**
     * @symbol ?getRegionConst@Actor@@QEBAAEBVBlockSource@@XZ
     * @hash   1043720626
     */
    MCAPI class BlockSource const & getRegionConst() const;
    /**
     * @symbol ?getRenderParams@Actor@@QEAAAEAVRenderParams@@XZ
     * @hash   1142539482
     */
    MCAPI class RenderParams & getRenderParams();
    /**
     * @symbol ?getRidingHeight@Actor@@QEBAMXZ
     * @hash   1343761594
     */
    MCAPI float getRidingHeight() const;
    /**
     * @symbol ?getRotation@Actor@@QEBA?AVVec2@@XZ
     * @hash   -1166160756
     */
    MCAPI class Vec2 getRotation() const;
    /**
     * @symbol ?getRuntimeID@Actor@@QEBA?AVActorRuntimeID@@XZ
     * @hash   -1550915476
     */
    MCAPI class ActorRuntimeID getRuntimeID() const;
    /**
     * @symbol ?getShakeTime@Actor@@QEBAHXZ
     * @hash   375343520
     */
    MCAPI int getShakeTime() const;
    /**
     * @symbol ?getSkinID@Actor@@QEBAHXZ
     * @hash   2132815924
     */
    MCAPI int getSkinID() const;
    /**
     * @symbol ?getSpatialNetworkData@Actor@@QEBAAEBVSpatialActorNetworkData@@XZ
     * @hash   667642152
     */
    MCAPI class SpatialActorNetworkData const & getSpatialNetworkData() const;
    /**
     * @symbol ?getSpatialNetworkData@Actor@@QEAAAEAVSpatialActorNetworkData@@XZ
     * @hash   2058398126
     */
    MCAPI class SpatialActorNetworkData & getSpatialNetworkData();
    /**
     * @symbol ?getSpeedInMetersPerSecond@Actor@@QEBAMXZ
     * @hash   1678382664
     */
    MCAPI float getSpeedInMetersPerSecond() const;
    /**
     * @symbol ?getStatusFlag@Actor@@QEBA_NW4ActorFlags@@@Z
     * @hash   -1633494847
     */
    MCAPI bool getStatusFlag(enum class ActorFlags) const;
    /**
     * @symbol ?getStrength@Actor@@QEBAHXZ
     * @hash   704581942
     */
    MCAPI int getStrength() const;
    /**
     * @symbol ?getStrengthMax@Actor@@QEBAHXZ
     * @hash   836398816
     */
    MCAPI int getStrengthMax() const;
    /**
     * @symbol ?getStructuralIntegrity@Actor@@QEBAHXZ
     * @hash   -764537190
     */
    MCAPI int getStructuralIntegrity() const;
    /**
     * @symbol ?getSwimAmount@Actor@@QEBAMM@Z
     * @hash   1412518597
     */
    MCAPI float getSwimAmount(float) const;
    /**
     * @symbol ?getTags@Actor@@QEBA?BV?$span@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0?0@gsl@@XZ
     * @hash   1303617028
     */
    MCAPI class gsl::span<std::string, -1> const getTags() const;
    /**
     * @symbol ?getTarget@Actor@@QEBAPEAV1@XZ
     * @hash   -762427863
     */
    MCAPI class Actor * getTarget() const;
    /**
     * @symbol ?getTargetId@Actor@@QEBA?AUActorUniqueID@@XZ
     * @hash   2133116022
     */
    MCAPI struct ActorUniqueID getTargetId() const;
    /**
     * @symbol ?getTradeInterest@Actor@@QEBA_NXZ
     * @hash   1349753830
     */
    MCAPI bool getTradeInterest() const;
    /**
     * @symbol ?getTradeOffers@Actor@@QEAAPEAVMerchantRecipeList@@XZ
     * @hash   -561079513
     */
    MCAPI class MerchantRecipeList * getTradeOffers();
    /**
     * @symbol ?getTradingPlayer@Actor@@QEBAPEAVPlayer@@XZ
     * @hash   -254413123
     */
    MCAPI class Player * getTradingPlayer() const;
    /**
     * @symbol ?getUniqueID@Actor@@QEBAAEBUActorUniqueID@@XZ
     * @hash   1957065414
     */
    MCAPI struct ActorUniqueID const & getUniqueID() const;
    /**
     * @symbol ?getVariant@Actor@@QEBAHXZ
     * @hash   -1197864204
     */
    MCAPI int getVariant() const;
    /**
     * @symbol ?getVehicle@Actor@@QEBAPEAV1@XZ
     * @hash   318459147
     */
    MCAPI class Actor * getVehicle() const;
    /**
     * @symbol ?getVehicleRoot@Actor@@QEBAPEAV1@XZ
     * @hash   -1499984645
     */
    MCAPI class Actor * getVehicleRoot() const;
    /**
     * @symbol ?getVehicleRuntimeID@Actor@@QEBA?AVActorRuntimeID@@XZ
     * @hash   2015938958
     */
    MCAPI class ActorRuntimeID getVehicleRuntimeID() const;
    /**
     * @symbol ?getVerticalSpeedInMetersPerSecond@Actor@@QEBAMXZ
     * @hash   -723119788
     */
    MCAPI float getVerticalSpeedInMetersPerSecond() const;
    /**
     * @symbol ?getViewVector@Actor@@QEBA?AVVec3@@M@Z
     * @hash   -1655103991
     */
    MCAPI class Vec3 getViewVector(float) const;
    /**
     * @symbol ?hasAnyEffects@Actor@@QEBA_NXZ
     * @hash   1730692756
     */
    MCAPI bool hasAnyEffects() const;
    /**
     * @symbol ?hasAnyVisibleEffects@Actor@@QEBA_NXZ
     * @hash   789135190
     */
    MCAPI bool hasAnyVisibleEffects() const;
    /**
     * @symbol ?hasBeenHurtByMobInLastTicks@Actor@@QEBA_NH@Z
     * @hash   338280293
     */
    MCAPI bool hasBeenHurtByMobInLastTicks(int) const;
    /**
     * @symbol ?hasCategory@Actor@@QEBA_NW4ActorCategory@@@Z
     * @hash   852749887
     */
    MCAPI bool hasCategory(enum class ActorCategory) const;
    /**
     * @symbol ?hasDefinitionGroup@Actor@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   55705321
     */
    MCAPI bool hasDefinitionGroup(std::string const &) const;
    /**
     * @symbol ?hasDimension@Actor@@QEBA_NXZ
     * @hash   -254122602
     */
    MCAPI bool hasDimension() const;
    /**
     * @symbol ?hasEffect@Actor@@QEBA_NAEBVMobEffect@@@Z
     * @hash   -894279203
     */
    MCAPI bool hasEffect(class MobEffect const &) const;
    /**
     * @symbol ?hasFamily@Actor@@QEBA_NAEBVHashedString@@@Z
     * @hash   798519287
     */
    MCAPI bool hasFamily(class HashedString const &) const;
    /**
     * @symbol ?hasFishingHook@Actor@@QEBA_NXZ
     * @hash   -1834683658
     */
    MCAPI bool hasFishingHook() const;
    /**
     * @symbol ?hasLevel@Actor@@QEBA_NXZ
     * @hash   1807035686
     */
    MCAPI bool hasLevel() const;
    /**
     * @symbol ?hasPassenger@Actor@@QEBA_NXZ
     * @hash   780262550
     */
    MCAPI bool hasPassenger() const;
    /**
     * @symbol ?hasPersistingTrade@Actor@@QEBA_NXZ
     * @hash   930909558
     */
    MCAPI bool hasPersistingTrade() const;
    /**
     * @symbol ?hasPlayerPassenger@Actor@@QEBA_NXZ
     * @hash   -1058185626
     */
    MCAPI bool hasPlayerPassenger() const;
    /**
     * @symbol ?hasPriorityAmmunition@Actor@@QEBA_NXZ
     * @hash   -1875319852
     */
    MCAPI bool hasPriorityAmmunition() const;
    /**
     * @symbol ?hasRuntimeID@Actor@@QEBA_NXZ
     * @hash   559340134
     */
    MCAPI bool hasRuntimeID() const;
    /**
     * @symbol ?hasSaddle@Actor@@QEBA_NXZ
     * @hash   1293756116
     */
    MCAPI bool hasSaddle() const;
    /**
     * @symbol ?hasTag@Actor@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -1598312695
     */
    MCAPI bool hasTag(std::string const &) const;
    /**
     * @symbol ?hasTags@Actor@@QEBA_NXZ
     * @hash   1034275060
     */
    MCAPI bool hasTags() const;
    /**
     * @symbol ?hasTeleported@Actor@@QEBA_NXZ
     * @hash   2147341748
     */
    MCAPI bool hasTeleported() const;
    /**
     * @symbol ?hasTotemEquipped@Actor@@QEBA_NXZ
     * @hash   1779548326
     */
    MCAPI bool hasTotemEquipped() const;
    /**
     * @symbol ?hasType@Actor@@QEBA_NW4ActorType@@@Z
     * @hash   -1627057001
     */
    MCAPI bool hasType(enum class ActorType) const;
    /**
     * @symbol ?hasUniqueID@Actor@@QEBA_NXZ
     * @hash   566268212
     */
    MCAPI bool hasUniqueID() const;
    /**
     * @symbol ?healEffects@Actor@@QEAAXH@Z
     * @hash   -1821030382
     */
    MCAPI void healEffects(int);
    /**
     * @symbol ?hurt@Actor@@QEAA_NAEBVActorDamageSource@@M_N1@Z
     * @hash   -1025198762
     */
    MCAPI bool hurt(class ActorDamageSource const &, float, bool, bool);
    /**
     * @symbol ?inDownwardFlowingLiquid@Actor@@QEBA_NXZ
     * @hash   945650500
     */
    MCAPI bool inDownwardFlowingLiquid() const;
    /**
     * @symbol ?initActorProperties@Actor@@QEAAXXZ
     * @hash   1013065221
     */
    MCAPI void initActorProperties();
    /**
     * @symbol ?initParams@Actor@@QEAAXAEAVVariantParameterList@@@Z
     * @hash   -1166754800
     */
    MCAPI void initParams(class VariantParameterList &);
    /**
     * @symbol ?initParams@Actor@@QEAAXAEAVRenderParams@@@Z
     * @hash   436896060
     */
    MCAPI void initParams(class RenderParams &);
    /**
     * @symbol ?isActorLocationInMaterial@Actor@@QEBA_NW4ActorLocation@@W4MaterialType@@@Z
     * @hash   -56505452
     */
    MCAPI bool isActorLocationInMaterial(enum class ActorLocation, enum class MaterialType) const;
    /**
     * @symbol ?isAngry@Actor@@QEBA_NXZ
     * @hash   -56260236
     */
    MCAPI bool isAngry() const;
    /**
     * @symbol ?isAutonomous@Actor@@QEBA_NXZ
     * @hash   71600038
     */
    MCAPI bool isAutonomous() const;
    /**
     * @symbol ?isBaby@Actor@@QEBA_NXZ
     * @hash   792819254
     */
    MCAPI bool isBaby() const;
    /**
     * @symbol ?isBreakingObstruction@Actor@@QEBA_NXZ
     * @hash   -579403436
     */
    MCAPI bool isBreakingObstruction() const;
    /**
     * @symbol ?isBribed@Actor@@QEBA_NXZ
     * @hash   -1626317962
     */
    MCAPI bool isBribed() const;
    /**
     * @symbol ?isCharged@Actor@@QEBA_NXZ
     * @hash   1289404148
     */
    MCAPI bool isCharged() const;
    /**
     * @symbol ?isChested@Actor@@QEBA_NXZ
     * @hash   -1620646636
     */
    MCAPI bool isChested() const;
    /**
     * @symbol ?isClimbing@Actor@@QEBA_NXZ
     * @hash   55354374
     */
    MCAPI bool isClimbing() const;
    /**
     * @symbol ?isControlledByLocalInstance@Actor@@QEBA_NXZ
     * @hash   1818235988
     */
    MCAPI bool isControlledByLocalInstance() const;
    /**
     * @symbol ?isDancing@Actor@@QEBA_NXZ
     * @hash   -2100268812
     */
    MCAPI bool isDancing() const;
    /**
     * @symbol ?isDoorBreaker@Actor@@QEBA_NXZ
     * @hash   241213764
     */
    MCAPI bool isDoorBreaker() const;
    /**
     * @symbol ?isDoorOpener@Actor@@QEBA_NXZ
     * @hash   -1175141018
     */
    MCAPI bool isDoorOpener() const;
    /**
     * @symbol ?isGlobal@Actor@@QEBA_NXZ
     * @hash   -651451402
     */
    MCAPI bool isGlobal() const;
    /**
     * @symbol ?isIgnited@Actor@@QEBA_NXZ
     * @hash   716728276
     */
    MCAPI bool isIgnited() const;
    /**
     * @symbol ?isImmersedInWater@Actor@@QEBA_NXZ
     * @hash   541405828
     */
    MCAPI bool isImmersedInWater() const;
    /**
     * @symbol ?isInClouds@Actor@@QEBA_NXZ
     * @hash   1774945862
     */
    MCAPI bool isInClouds() const;
    /**
     * @symbol ?isInContactWithWater@Actor@@QEBA_NXZ
     * @hash   -1372149658
     */
    MCAPI bool isInContactWithWater() const;
    /**
     * @symbol ?isInLove@Actor@@QEBA_NXZ
     * @hash   -1267564954
     */
    MCAPI bool isInLove() const;
    /**
     * @symbol ?isInPrecipitation@Actor@@QEBA_NXZ
     * @hash   886591812
     */
    MCAPI bool isInPrecipitation() const;
    /**
     * @symbol ?isInRain@Actor@@QEBA_NXZ
     * @hash   1101661734
     */
    MCAPI bool isInRain() const;
    /**
     * @symbol ?isInScaffolding@Actor@@QEBA_NXZ
     * @hash   728590436
     */
    MCAPI bool isInScaffolding() const;
    /**
     * @symbol ?isInSnow@Actor@@QEBA_NXZ
     * @hash   -286495834
     */
    MCAPI bool isInSnow() const;
    /**
     * @symbol ?isInThunderstorm@Actor@@QEBA_NXZ
     * @hash   142988870
     */
    MCAPI bool isInThunderstorm() const;
    /**
     * @symbol ?isInWaterOrRain@Actor@@QEBA_NXZ
     * @hash   1167526436
     */
    MCAPI bool isInWaterOrRain() const;
    /**
     * @symbol ?isInWorld@Actor@@QEBA_NXZ
     * @hash   -1518813004
     */
    MCAPI bool isInWorld() const;
    /**
     * @symbol ?isInsideBorderBlock@Actor@@QEBA_NM@Z
     * @hash   -1862591853
     */
    MCAPI bool isInsideBorderBlock(float) const;
    /**
     * @symbol ?isInsidePortal@Actor@@QEBA_NXZ
     * @hash   -603541418
     */
    MCAPI bool isInsidePortal() const;
    /**
     * @symbol ?isLayingDown@Actor@@QEBA_NXZ
     * @hash   136119654
     */
    MCAPI bool isLayingDown() const;
    /**
     * @symbol ?isLeashed@Actor@@QEBA_NXZ
     * @hash   986520036
     */
    MCAPI bool isLeashed() const;
    /**
     * @symbol ?isMovedToLimbo@Actor@@QEBA_NXZ
     * @hash   1737539014
     */
    MCAPI bool isMovedToLimbo() const;
    /**
     * @symbol ?isMovedToUnloadedChunk@Actor@@QEBA_NXZ
     * @hash   -442089962
     */
    MCAPI bool isMovedToUnloadedChunk() const;
    /**
     * @symbol ?isMoving@Actor@@QEBA_NXZ
     * @hash   1214964998
     */
    MCAPI bool isMoving() const;
    /**
     * @symbol ?isOrphan@Actor@@QEBA_NXZ
     * @hash   384254982
     */
    MCAPI bool isOrphan() const;
    /**
     * @symbol ?isOutOfControl@Actor@@QEBA_NXZ
     * @hash   809906534
     */
    MCAPI bool isOutOfControl() const;
    /**
     * @symbol ?isOverScaffolding@Actor@@QEBA_NXZ
     * @hash   980127172
     */
    MCAPI bool isOverScaffolding() const;
    /**
     * @symbol ?isPacified@Actor@@QEBA_NXZ
     * @hash   1003913478
     */
    MCAPI bool isPacified() const;
    /**
     * @symbol ?isPassenger@Actor@@QEBA_NAEBV1@@Z
     * @hash   -538140053
     */
    MCAPI bool isPassenger(class Actor const &) const;
    /**
     * @symbol ?isPersistent@Actor@@QEBA_NXZ
     * @hash   540566166
     */
    MCAPI bool isPersistent() const;
    /**
     * @symbol ?isPlayingDead@Actor@@QEBA_NXZ
     * @hash   1590652420
     */
    MCAPI bool isPlayingDead() const;
    /**
     * @symbol ?isPowered@Actor@@QEBA_NXZ
     * @hash   -79302940
     */
    MCAPI bool isPowered() const;
    /**
     * @symbol ?isRegionValid@Actor@@QEBA_NXZ
     * @hash   745493140
     */
    MCAPI bool isRegionValid() const;
    /**
     * @symbol ?isRemoved@Actor@@QEBA_NXZ
     * @hash   -1622623836
     */
    MCAPI bool isRemoved() const;
    /**
     * @symbol ?isResting@Actor@@QEBA_NXZ
     * @hash   -1413959564
     */
    MCAPI bool isResting() const;
    /**
     * @symbol ?isRiding@Actor@@QEBA_NPEAV1@@Z
     * @hash   1992634892
     */
    MCAPI bool isRiding(class Actor *) const;
    /**
     * @symbol ?isRiding@Actor@@QEBA_NXZ
     * @hash   -1349174682
     */
    MCAPI bool isRiding() const;
    /**
     * @symbol ?isSafeToSleepNear@Actor@@QEBA_NXZ
     * @hash   297089364
     */
    MCAPI bool isSafeToSleepNear() const;
    /**
     * @symbol ?isSheared@Actor@@QEBA_NXZ
     * @hash   1149619972
     */
    MCAPI bool isSheared() const;
    /**
     * @symbol ?isSitting@Actor@@QEBA_NXZ
     * @hash   1364927172
     */
    MCAPI bool isSitting() const;
    /**
     * @symbol ?isSneaking@Actor@@QEBA_NXZ
     * @hash   -1065049818
     */
    MCAPI bool isSneaking() const;
    /**
     * @symbol ?isSoulSpeedEnchantActive@Actor@@QEBA_NXZ
     * @hash   -1807288666
     */
    MCAPI bool isSoulSpeedEnchantActive() const;
    /**
     * @symbol ?isStackable@Actor@@QEBA_NXZ
     * @hash   195322068
     */
    MCAPI bool isStackable() const;
    /**
     * @symbol ?isStanding@Actor@@QEBA_NXZ
     * @hash   1491915350
     */
    MCAPI bool isStanding() const;
    /**
     * @symbol ?isSwimmer@Actor@@QEBA_NXZ
     * @hash   12706740
     */
    MCAPI bool isSwimmer() const;
    /**
     * @symbol ?isSwimming@Actor@@QEBA_NXZ
     * @hash   -50485450
     */
    MCAPI bool isSwimming() const;
    /**
     * @symbol ?isTame@Actor@@QEBA_NXZ
     * @hash   -320769834
     */
    MCAPI bool isTame() const;
    /**
     * @symbol ?isTickingEntity@Actor@@QEBA_NXZ
     * @hash   1469770932
     */
    MCAPI bool isTickingEntity() const;
    /**
     * @symbol ?isTouchingDamageBlock@Actor@@QEBA_NXZ
     * @hash   -175530796
     */
    MCAPI bool isTouchingDamageBlock() const;
    /**
     * @symbol ?isTrading@Actor@@QEBA_NXZ
     * @hash   -804548652
     */
    MCAPI bool isTrading() const;
    /**
     * @symbol ?isTrusting@Actor@@QEBA_NXZ
     * @hash   1917273142
     */
    MCAPI bool isTrusting() const;
    /**
     * @symbol ?isType@Actor@@QEBA_NW4ActorType@@@Z
     * @hash   -1346122651
     */
    MCAPI bool isType(enum class ActorType) const;
    /**
     * @symbol ?isUseNewTradeScreen@Actor@@QEBA_NXZ
     * @hash   -827677132
     */
    MCAPI bool isUseNewTradeScreen() const;
    /**
     * @symbol ?isWASDControlled@Actor@@QEBA_NXZ
     * @hash   -709348490
     */
    MCAPI bool isWASDControlled() const;
    /**
     * @symbol ?isWalker@Actor@@QEBA_NXZ
     * @hash   389505462
     */
    MCAPI bool isWalker() const;
    /**
     * @symbol ?lerpTo@Actor@@QEAAXAEBVVec3@@AEBVVec2@@MH@Z
     * @hash   510589653
     */
    MCAPI void lerpTo(class Vec3 const &, class Vec2 const &, float, int);
    /**
     * @symbol ?lerpTo@Actor@@QEAAXAEBVVec3@@AEBVVec2@@H@Z
     * @hash   1251129680
     */
    MCAPI void lerpTo(class Vec3 const &, class Vec2 const &, int);
    /**
     * @symbol ?lerpToRotation@Actor@@QEAAXAEBVVec2@@H@Z
     * @hash   -668074275
     */
    MCAPI void lerpToRotation(class Vec2 const &, int);
    /**
     * @symbol ?loadEntityFlags@Actor@@QEAAXAEBVCompoundTag@@AEAVDataLoadHelper@@@Z
     * @hash   -154094241
     */
    MCAPI void loadEntityFlags(class CompoundTag const &, class DataLoadHelper &);
    /**
     * @symbol ?lovePartnerId@Actor@@QEBAAEBUActorUniqueID@@XZ
     * @hash   -1059024508
     */
    MCAPI struct ActorUniqueID const & lovePartnerId() const;
    /**
     * @symbol ?migrateUniqueID@Actor@@QEAAXUActorUniqueID@@@Z
     * @hash   1726883292
     */
    MCAPI void migrateUniqueID(struct ActorUniqueID);
    /**
     * @symbol ?moveBBs@Actor@@QEAAXAEBVVec3@@@Z
     * @hash   1153233894
     */
    MCAPI void moveBBs(class Vec3 const &);
    /**
     * @symbol ?moveRelative@Actor@@QEAAXMMMM@Z
     * @hash   1838964565
     */
    MCAPI void moveRelative(float, float, float, float);
    /**
     * @symbol ?moveTo@Actor@@QEAAXAEBVVec3@@AEBVVec2@@@Z
     * @hash   -1163431257
     */
    MCAPI void moveTo(class Vec3 const &, class Vec2 const &);
    /**
     * @symbol ?onAffectedByWaterBottle@Actor@@QEAAXXZ
     * @hash   1461429211
     */
    MCAPI void onAffectedByWaterBottle();
    /**
     * @symbol ?onClimbableBlock@Actor@@QEBA_NXZ
     * @hash   1622218182
     */
    MCAPI bool onClimbableBlock() const;
    /**
     * @symbol ?onHoverableBlock@Actor@@QEBA_NXZ
     * @hash   2134474374
     */
    MCAPI bool onHoverableBlock() const;
    /**
     * @symbol ?onOnewayCollision@Actor@@QEAAXAEBVAABB@@@Z
     * @hash   1340170276
     */
    MCAPI void onOnewayCollision(class AABB const &);
    /**
     * @symbol ??9Actor@@QEBA_NAEBV0@@Z
     * @hash   -1768904297
     */
    MCAPI bool operator!=(class Actor const &) const;
    /**
     * @symbol ??8Actor@@QEBA_NAEBV0@@Z
     * @hash   361567058
     */
    MCAPI bool operator==(class Actor const &) const;
    /**
     * @symbol ?pickUpItem@Actor@@QEAAXAEAVItemActor@@H@Z
     * @hash   -723926481
     */
    MCAPI void pickUpItem(class ItemActor &, int);
    /**
     * @symbol ?playSound@Actor@@QEAAXW4LevelSoundEvent@@AEBVVec3@@AEBVBlock@@@Z
     * @hash   1767714548
     */
    MCAPI void playSound(enum class LevelSoundEvent, class Vec3 const &, class Block const &);
    /**
     * @symbol ?playSound@Actor@@QEAAXW4LevelSoundEvent@@AEBVVec3@@H@Z
     * @hash   1385946164
     */
    MCAPI void playSound(enum class LevelSoundEvent, class Vec3 const &, int);
    /**
     * @symbol ?positionAllPassengers@Actor@@QEAAX_N@Z
     * @hash   642950184
     */
    MCAPI void positionAllPassengers(bool);
    /**
     * @symbol ?postSplashGameEvent@Actor@@QEAAXXZ
     * @hash   1374762279
     */
    MCAPI void postSplashGameEvent();
    /**
     * @symbol ?pullInEntity@Actor@@QEAA_NAEAV1@@Z
     * @hash   956885349
     */
    MCAPI bool pullInEntity(class Actor &);
    /**
     * @symbol ?pushBackActionEventToActionQueue@Actor@@QEAAXVActionEvent@@@Z
     * @hash   -1140609870
     */
    MCAPI void pushBackActionEventToActionQueue(class ActionEvent);
    /**
     * @symbol ?queueBBUpdateFromDefinition@Actor@@QEAAXXZ
     * @hash   -240990909
     */
    MCAPI void queueBBUpdateFromDefinition();
    /**
     * @symbol ?queueBBUpdateFromValue@Actor@@QEAAXAEBVVec2@@@Z
     * @hash   2085918566
     */
    MCAPI void queueBBUpdateFromValue(class Vec2 const &);
    /**
     * @symbol ?refreshComponents@Actor@@QEAAXXZ
     * @hash   1578653687
     */
    MCAPI void refreshComponents();
    /**
     * @symbol ?reload@Actor@@QEAAXXZ
     * @hash   1290814309
     */
    MCAPI void reload();
    /**
     * @symbol ?removeAllEffects@Actor@@QEAAXXZ
     * @hash   123050077
     */
    MCAPI void removeAllEffects();
    /**
     * @symbol ?removeAllPassengers@Actor@@QEAAX_N0@Z
     * @hash   -1359298504
     */
    MCAPI void removeAllPassengers(bool, bool);
    /**
     * @symbol ?removeDefinitionGroup@Actor@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -1924145732
     */
    MCAPI void removeDefinitionGroup(std::string const &);
    /**
     * @symbol ?removeEffect@Actor@@QEAAXH@Z
     * @hash   -1706172530
     */
    MCAPI void removeEffect(int);
    /**
     * @symbol ?removePersistingTrade@Actor@@QEAAXXZ
     * @hash   -429002343
     */
    MCAPI void removePersistingTrade();
    /**
     * @symbol ?removeTag@Actor@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   83609805
     */
    MCAPI bool removeTag(std::string const &);
    /**
     * @symbol ?resetClientAnimations@Actor@@QEAAXXZ
     * @hash   246956519
     */
    MCAPI void resetClientAnimations();
    /**
     * @symbol ?resetRegion@Actor@@QEAAXXZ
     * @hash   -903450869
     */
    MCAPI void resetRegion();
    /**
     * @symbol ?saveEntityFlags@Actor@@QEBAXAEAVCompoundTag@@@Z
     * @hash   858551080
     */
    MCAPI void saveEntityFlags(class CompoundTag &) const;
    /**
     * @symbol ?saveLinks@Actor@@QEBA?AV?$unique_ptr@VListTag@@U?$default_delete@VListTag@@@std@@@std@@XZ
     * @hash   -1783614876
     */
    MCAPI std::unique_ptr<class ListTag> saveLinks() const;
    /**
     * @symbol ?savePersistingTrade@Actor@@QEAAXV?$unique_ptr@VCompoundTag@@U?$default_delete@VCompoundTag@@@std@@@std@@H@Z
     * @hash   -1482709787
     */
    MCAPI void savePersistingTrade(std::unique_ptr<class CompoundTag>, int);
    /**
     * @symbol ?sendActorDefinitionEventTriggered@Actor@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   232813170
     */
    MCAPI void sendActorDefinitionEventTriggered(std::string const &);
    /**
     * @symbol ?sendMotionToServer@Actor@@QEAAXXZ
     * @hash   -577462261
     */
    MCAPI void sendMotionToServer();
    /**
     * @symbol ?serializationSetHealth@Actor@@QEAAXH@Z
     * @hash   -576111732
     */
    MCAPI void serializationSetHealth(int);
    /**
     * @symbol ?setAABB@Actor@@QEAAXAEBVAABB@@@Z
     * @hash   909518308
     */
    MCAPI void setAABB(class AABB const &);
    /**
     * @symbol ?setAABBDim@Actor@@QEAAXAEBVVec2@@@Z
     * @hash   1355776662
     */
    MCAPI void setAABBDim(class Vec2 const &);
    /**
     * @symbol ?setActorRendererId@Actor@@QEAAXVHashedString@@@Z
     * @hash   -116879264
     */
    MCAPI void setActorRendererId(class HashedString);
    /**
     * @symbol ?setAutonomous@Actor@@QEAAX_N@Z
     * @hash   349128856
     */
    MCAPI void setAutonomous(bool);
    /**
     * @symbol ?setBaseDefinition@Actor@@QEAAXAEBUActorDefinitionIdentifier@@_N1@Z
     * @hash   -422347274
     */
    MCAPI void setBaseDefinition(struct ActorDefinitionIdentifier const &, bool, bool);
    /**
     * @symbol ?setBlockTarget@Actor@@QEAAXAEBVBlockPos@@@Z
     * @hash   -1369025196
     */
    MCAPI void setBlockTarget(class BlockPos const &);
    /**
     * @symbol ?setBreakingObstruction@Actor@@QEAAX_N@Z
     * @hash   1387831686
     */
    MCAPI void setBreakingObstruction(bool);
    /**
     * @symbol ?setCanClimb@Actor@@QEAAX_N@Z
     * @hash   1745711368
     */
    MCAPI void setCanClimb(bool);
    /**
     * @symbol ?setCanFly@Actor@@QEAAX_N@Z
     * @hash   604856488
     */
    MCAPI void setCanFly(bool);
    /**
     * @symbol ?setChainedDamageEffects@Actor@@QEAAX_N@Z
     * @hash   86994232
     */
    MCAPI void setChainedDamageEffects(bool);
    /**
     * @symbol ?setCharged@Actor@@QEAAX_N@Z
     * @hash   -16878138
     */
    MCAPI void setCharged(bool);
    /**
     * @symbol ?setClimbing@Actor@@QEAAX_N@Z
     * @hash   -202099544
     */
    MCAPI void setClimbing(bool);
    /**
     * @symbol ?setCollidableMob@Actor@@QEAAX_N@Z
     * @hash   1360175718
     */
    MCAPI void setCollidableMob(bool);
    /**
     * @symbol ?setCollidableMobNear@Actor@@QEAAX_N@Z
     * @hash   -1408352762
     */
    MCAPI void setCollidableMobNear(bool);
    /**
     * @symbol ?setColor@Actor@@QEAAXW4PaletteColor@@@Z
     * @hash   -952789568
     */
    MCAPI void setColor(enum class PaletteColor);
    /**
     * @symbol ?setControllingSeat@Actor@@QEAAXH@Z
     * @hash   -1283689748
     */
    MCAPI void setControllingSeat(int);
    /**
     * @symbol ?setDancing@Actor@@QEAAX_N@Z
     * @hash   -2032531770
     */
    MCAPI void setDancing(bool);
    /**
     * @symbol ?setDoorBreaker@Actor@@QEAAX_N@Z
     * @hash   1734235302
     */
    MCAPI void setDoorBreaker(bool);
    /**
     * @symbol ?setDoorOpener@Actor@@QEAAX_N@Z
     * @hash   329199240
     */
    MCAPI void setDoorOpener(bool);
    /**
     * @symbol ?setEnchanted@Actor@@QEAAX_N@Z
     * @hash   210083430
     */
    MCAPI void setEnchanted(bool);
    /**
     * @symbol ?setFishingHookID@Actor@@QEAAXUActorUniqueID@@@Z
     * @hash   -1219217350
     */
    MCAPI void setFishingHookID(struct ActorUniqueID);
    /**
     * @symbol ?setGlobal@Actor@@QEAAX_N@Z
     * @hash   762220200
     */
    MCAPI void setGlobal(bool);
    /**
     * @symbol ?setHurtDir@Actor@@QEAAXH@Z
     * @hash   1137907984
     */
    MCAPI void setHurtDir(int);
    /**
     * @symbol ?setHurtTime@Actor@@QEAAXH@Z
     * @hash   -1682157414
     */
    MCAPI void setHurtTime(int);
    /**
     * @symbol ?setInLove@Actor@@QEAAXPEAV1@@Z
     * @hash   -889849891
     */
    MCAPI void setInLove(class Actor *);
    /**
     * @symbol ?setInterpolation@Actor@@QEAAX_N@Z
     * @hash   1169391942
     */
    MCAPI void setInterpolation(bool);
    /**
     * @symbol ?setInvisible@Actor@@QEAAX_N@Z
     * @hash   -1322682778
     */
    MCAPI void setInvisible(bool);
    /**
     * @symbol ?setIsExperienceDropEnabled@Actor@@QEAAX_N@Z
     * @hash   -1818520250
     */
    MCAPI void setIsExperienceDropEnabled(bool);
    /**
     * @symbol ?setJumpDuration@Actor@@QEAAXH@Z
     * @hash   -1953112882
     */
    MCAPI void setJumpDuration(int);
    /**
     * @symbol ?setLastHitBB@Actor@@QEAAXAEBVVec3@@0@Z
     * @hash   -969402702
     */
    MCAPI void setLastHitBB(class Vec3 const &, class Vec3 const &);
    /**
     * @symbol ?setLayingDown@Actor@@QEAAX_N@Z
     * @hash   -2092017608
     */
    MCAPI void setLayingDown(bool);
    /**
     * @symbol ?setLeashHolder@Actor@@QEAAXUActorUniqueID@@@Z
     * @hash   680970746
     */
    MCAPI void setLeashHolder(struct ActorUniqueID);
    /**
     * @symbol ?setLimitedLifetimeTicks@Actor@@QEAAXH@Z
     * @hash   1560272300
     */
    MCAPI void setLimitedLifetimeTicks(int);
    /**
     * @symbol ?setMarkVariant@Actor@@QEAAXH@Z
     * @hash   1371469420
     */
    MCAPI void setMarkVariant(int);
    /**
     * @symbol ?setMovedToLimbo@Actor@@QEAAX_N@Z
     * @hash   1718264232
     */
    MCAPI void setMovedToLimbo(bool);
    /**
     * @symbol ?setMovedToUnloadedChunk@Actor@@QEAAX_N@Z
     * @hash   -1710448776
     */
    MCAPI void setMovedToUnloadedChunk(bool);
    /**
     * @symbol ?setMoving@Actor@@QEAAX_N@Z
     * @hash   -1621442520
     */
    MCAPI void setMoving(bool);
    /**
     * @symbol ?setPersistent@Actor@@QEAAXXZ
     * @hash   -202996377
     */
    MCAPI void setPersistent();
    /**
     * @symbol ?setPosDirectLegacy@Actor@@QEAAXAEBVVec3@@@Z
     * @hash   -579018236
     */
    MCAPI void setPosDirectLegacy(class Vec3 const &);
    /**
     * @symbol ?setPosPrev@Actor@@QEAAXAEBVVec3@@@Z
     * @hash   -1258458444
     */
    MCAPI void setPosPrev(class Vec3 const &);
    /**
     * @symbol ?setPreviousPosRot@Actor@@QEAAXAEBVVec3@@AEBVVec2@@@Z
     * @hash   522236153
     */
    MCAPI void setPreviousPosRot(class Vec3 const &, class Vec2 const &);
    /**
     * @symbol ?setRegion@Actor@@QEAAXAEAVBlockSource@@@Z
     * @hash   1908077848
     */
    MCAPI void setRegion(class BlockSource &);
    /**
     * @symbol ?setResting@Actor@@QEAAX_N@Z
     * @hash   1893696086
     */
    MCAPI void setResting(bool);
    /**
     * @symbol ?setRuntimeID@Actor@@QEAAXVActorRuntimeID@@@Z
     * @hash   689509344
     */
    MCAPI void setRuntimeID(class ActorRuntimeID);
    /**
     * @symbol ?setSaddle@Actor@@QEAAX_N@Z
     * @hash   -1716560824
     */
    MCAPI void setSaddle(bool);
    /**
     * @symbol ?setScared@Actor@@QEAAX_N@Z
     * @hash   -1914857528
     */
    MCAPI void setScared(bool);
    /**
     * @symbol ?setSeatDescription@Actor@@QEAAXAEBVVec3@@AEBUSeatDescription@@@Z
     * @hash   638818109
     */
    MCAPI void setSeatDescription(class Vec3 const &, struct SeatDescription const &);
    /**
     * @symbol ?setShakeTime@Actor@@QEAAXH@Z
     * @hash   -347967530
     */
    MCAPI void setShakeTime(int);
    /**
     * @symbol ?setSkinID@Actor@@QEAAXH@Z
     * @hash   -1887529326
     */
    MCAPI void setSkinID(int);
    /**
     * @symbol ?setStatusFlag@Actor@@QEAAXW4ActorFlags@@_N@Z
     * @hash   -1512059191
     */
    MCAPI void setStatusFlag(enum class ActorFlags, bool);
    /**
     * @symbol ?setStrength@Actor@@QEAAXH@Z
     * @hash   1881184240
     */
    MCAPI void setStrength(int);
    /**
     * @symbol ?setStrengthMax@Actor@@QEAAXH@Z
     * @hash   635881766
     */
    MCAPI void setStrengthMax(int);
    /**
     * @symbol ?setStructuralIntegrity@Actor@@QEAAXH@Z
     * @hash   346859772
     */
    MCAPI void setStructuralIntegrity(int);
    /**
     * @symbol ?setStunned@Actor@@QEAAX_N@Z
     * @hash   772277078
     */
    MCAPI void setStunned(bool);
    /**
     * @symbol ?setSwimmer@Actor@@QEAAX_N@Z
     * @hash   -1159069258
     */
    MCAPI void setSwimmer(bool);
    /**
     * @symbol ?setTempted@Actor@@QEAAX_N@Z
     * @hash   958299814
     */
    MCAPI void setTempted(bool);
    /**
     * @symbol ?setTradeInterest@Actor@@QEAAX_N@Z
     * @hash   116373302
     */
    MCAPI void setTradeInterest(bool);
    /**
     * @symbol ?setTradingPlayer@Actor@@QEAAXPEAVPlayer@@@Z
     * @hash   -1499940451
     */
    MCAPI void setTradingPlayer(class Player *);
    /**
     * @symbol ?setUniqueID@Actor@@QEAAXUActorUniqueID@@@Z
     * @hash   -812655428
     */
    MCAPI void setUniqueID(struct ActorUniqueID);
    /**
     * @symbol ?setVariant@Actor@@QEAAXH@Z
     * @hash   -1140947214
     */
    MCAPI void setVariant(int);
    /**
     * @symbol ?setVelocity@Actor@@QEAAXAEBVVec3@@@Z
     * @hash   835578646
     */
    MCAPI void setVelocity(class Vec3 const &);
    /**
     * @symbol ?setWASDControlled@Actor@@QEAAX_N@Z
     * @hash   -1205193576
     */
    MCAPI void setWASDControlled(bool);
    /**
     * @symbol ?setWalker@Actor@@QEAAX_N@Z
     * @hash   -1556219736
     */
    MCAPI void setWalker(bool);
    /**
     * @symbol ?shouldOrphan@Actor@@QEAA_NAEAVBlockSource@@@Z
     * @hash   110265555
     */
    MCAPI bool shouldOrphan(class BlockSource &);
    /**
     * @symbol ?shouldUpdateEffects@Actor@@QEBA_NXZ
     * @hash   -273969708
     */
    MCAPI bool shouldUpdateEffects() const;
    /**
     * @symbol ?spawnBalloonPopParticles@Actor@@QEAAXXZ
     * @hash   680740339
     */
    MCAPI void spawnBalloonPopParticles();
    /**
     * @symbol ?spawnDeathParticles@Actor@@QEAAXXZ
     * @hash   290720333
     */
    MCAPI void spawnDeathParticles();
    /**
     * @symbol ?spawnDustParticles@Actor@@QEAAXH@Z
     * @hash   1949051656
     */
    MCAPI void spawnDustParticles(int);
    /**
     * @symbol ?spawnEatParticles@Actor@@QEAAXAEBVItemStack@@H@Z
     * @hash   218235053
     */
    MCAPI void spawnEatParticles(class ItemStack const &, int);
    /**
     * @symbol ?spawnTamingParticles@Actor@@QEAAX_N@Z
     * @hash   -1706463930
     */
    MCAPI void spawnTamingParticles(bool);
    /**
     * @symbol ?spinAttack@Actor@@QEAAXXZ
     * @hash   107370935
     */
    MCAPI void spinAttack();
    /**
     * @symbol ?teleportPassengersTo@Actor@@QEAAXAEBVVec3@@HH@Z
     * @hash   -187828892
     */
    MCAPI void teleportPassengersTo(class Vec3 const &, int, int);
    /**
     * @symbol ?testForEntityStacking@Actor@@QEAAXAEAVBlockSource@@AEBVAABB@@AEAV?$vector@VAABB@@V?$allocator@VAABB@@@std@@@std@@@Z
     * @hash   70948690
     */
    MCAPI void testForEntityStacking(class BlockSource &, class AABB const &, std::vector<class AABB> &);
    /**
     * @symbol ?tick@Actor@@QEAA_NAEAVBlockSource@@@Z
     * @hash   -1265835885
     */
    MCAPI bool tick(class BlockSource &);
    /**
     * @symbol ?transferTickingArea@Actor@@QEAAXAEAVDimension@@@Z
     * @hash   -1681952758
     */
    MCAPI void transferTickingArea(class Dimension &);
    /**
     * @symbol ?tryGetEquippableSlotAllowedItems@Actor@@QEBAPEBV?$vector@VItemDescriptor@@V?$allocator@VItemDescriptor@@@std@@@std@@H@Z
     * @hash   891494860
     */
    MCAPI std::vector<class ItemDescriptor> const * tryGetEquippableSlotAllowedItems(int) const;
    /**
     * @symbol ?updateAnimationComponentOnServer@Actor@@QEAAXXZ
     * @hash   1718028075
     */
    MCAPI void updateAnimationComponentOnServer();
    /**
     * @symbol ?updateBBFromDefinition@Actor@@QEAAXXZ
     * @hash   -1781305489
     */
    MCAPI void updateBBFromDefinition();
    /**
     * @symbol ?updateDescription@Actor@@QEAAXXZ
     * @hash   227938011
     */
    MCAPI void updateDescription();
    /**
     * @symbol ?updateInvisibilityStatus@Actor@@QEAAXXZ
     * @hash   1990431271
     */
    MCAPI void updateInvisibilityStatus();
    /**
     * @symbol ?updateMolangVariables@Actor@@QEAAXAEAVRenderParams@@@Z
     * @hash   -1005173938
     */
    MCAPI void updateMolangVariables(class RenderParams &);
    /**
     * @symbol ?updateTickingData@Actor@@QEAAXXZ
     * @hash   1898982753
     */
    MCAPI void updateTickingData();
    /**
     * @symbol ?useSaddle@Actor@@QEAA_NAEAVItemStackBase@@PEAVPlayer@@@Z
     * @hash   -756756253
     */
    MCAPI bool useSaddle(class ItemStackBase &, class Player *);
    /**
     * @symbol ?wasLastHitByPlayer@Actor@@QEAA_NXZ
     * @hash   1814608998
     */
    MCAPI bool wasLastHitByPlayer();
    /**
     * @symbol ?wasLoadedFromNBTThisFrame@Actor@@QEBA_NXZ
     * @hash   -807371244
     */
    MCAPI bool wasLoadedFromNBTThisFrame() const;
    /**
     * @symbol ?DEFAULT_AMBIENT_SOUND_INTERVAL@Actor@@2MB
     * @hash   498961083
     */
    MCAPI static float const DEFAULT_AMBIENT_SOUND_INTERVAL;
    /**
     * @symbol ?DEFAULT_AMBIENT_SOUND_INTERVAL_RANGE@Actor@@2MB
     * @hash   1924027323
     */
    MCAPI static float const DEFAULT_AMBIENT_SOUND_INTERVAL_RANGE;
    /**
     * @symbol ?DEFAULT_MOVEMENT_SOUND_DISTANCE_OFFSET@Actor@@2MB
     * @hash   -995486255
     */
    MCAPI static float const DEFAULT_MOVEMENT_SOUND_DISTANCE_OFFSET;
    /**
     * @symbol ?ENTITY_COLLISION_SKIN@Actor@@2VVec3@@B
     * @hash   1050668927
     */
    MCAPI static class Vec3 const ENTITY_COLLISION_SKIN;
    /**
     * @symbol ?LAVA_AABB_SHRINK_AMOUNT@Actor@@2VVec3@@B
     * @hash   -306821169
     */
    MCAPI static class Vec3 const LAVA_AABB_SHRINK_AMOUNT;
    /**
     * @symbol ?LAVA_FLOW_STRENGTH_MULTIPLIER@Actor@@2MB
     * @hash   1186153875
     */
    MCAPI static float const LAVA_FLOW_STRENGTH_MULTIPLIER;
    /**
     * @symbol ?MAX_BYTE_CHARGE_AMOUNT@Actor@@2HB
     * @hash   1825861477
     */
    MCAPI static int const MAX_BYTE_CHARGE_AMOUNT;
    /**
     * @symbol ?PLAYER_HURT_EXPERIENCE_TIME@Actor@@2HB
     * @hash   -2099901111
     */
    MCAPI static int const PLAYER_HURT_EXPERIENCE_TIME;
    /**
     * @symbol ?RIDING_TAG@Actor@@2V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B
     * @hash   198893219
     */
    MCAPI static std::string const RIDING_TAG;
    /**
     * @symbol ?TOTAL_AIR_SUPPLY@Actor@@2HB
     * @hash   -88182647
     */
    MCAPI static int const TOTAL_AIR_SUPPLY;
    /**
     * @symbol ?WATER_AABB_SHRINK_AMOUNT@Actor@@2VVec3@@B
     * @hash   212145935
     */
    MCAPI static class Vec3 const WATER_AABB_SHRINK_AMOUNT;
    /**
     * @symbol ?WATER_FLOW_STRENGTH_MULTIPLIER@Actor@@2MB
     * @hash   237690623
     */
    MCAPI static float const WATER_FLOW_STRENGTH_MULTIPLIER;
    /**
     * @symbol ?_move@Actor@@SAXAEAUIActorMovementProxy@@AEBVVec3@@@Z
     * @hash   -1388997265
     */
    MCAPI static void _move(struct IActorMovementProxy &, class Vec3 const &);
    /**
     * @symbol ?buildForward@Actor@@SA?AVVec3@@AEBUIActorMovementProxy@@@Z
     * @hash   -1117602025
     */
    MCAPI static class Vec3 buildForward(struct IActorMovementProxy const &);
    /**
     * @symbol ?canBeginOrContinueClimbingLadder@Actor@@SA_NAEBUIActorMovementProxy@@@Z
     * @hash   1424945269
     */
    MCAPI static bool canBeginOrContinueClimbingLadder(struct IActorMovementProxy const &);
    /**
     * @symbol ?checkEntityOnewayCollision@Actor@@SAXAEAVBlockSource@@AEBVBlockPos@@@Z
     * @hash   977785461
     */
    MCAPI static void checkEntityOnewayCollision(class BlockSource &, class BlockPos const &);
    /**
     * @symbol ?getBlockPosCurrentlyStandingOn@Actor@@SA?AVBlockPos@@AEBUIActorMovementProxy@@PEBU3@@Z
     * @hash   1965023397
     */
    MCAPI static class BlockPos getBlockPosCurrentlyStandingOn(struct IActorMovementProxy const &, struct IActorMovementProxy const *);
    /**
     * @symbol ?getBlockPosCurrentlyStandingOn@Actor@@SA?AVBlockPos@@AEBVVec3@@VAABB@@AEBVIConstBlockSource@@V?$optional_ref@$$CBVGetCollisionShapeInterface@@@@@Z
     * @hash   -455692879
     */
    MCAPI static class BlockPos getBlockPosCurrentlyStandingOn(class Vec3 const &, class AABB, class IConstBlockSource const &, class optional_ref<class GetCollisionShapeInterface const>);
    /**
     * @symbol ?getEffect@Actor@@SAPEBVMobEffectInstance@@AEBV?$vector@VMobEffectInstance@@V?$allocator@VMobEffectInstance@@@std@@@std@@AEBVMobEffect@@@Z
     * @hash   -193362041
     */
    MCAPI static class MobEffectInstance const * getEffect(std::vector<class MobEffectInstance> const &, class MobEffect const &);
    /**
     * @symbol ?getInterpolatedRotation@Actor@@SA?AVVec2@@AEBV2@0M@Z
     * @hash   -909374281
     */
    MCAPI static class Vec2 getInterpolatedRotation(class Vec2 const &, class Vec2 const &, float);
    /**
     * @symbol ?getLiquidAABB@Actor@@SA?AVAABB@@AEBV2@W4MaterialType@@@Z
     * @hash   -1212607510
     */
    MCAPI static class AABB getLiquidAABB(class AABB const &, enum class MaterialType);
    /**
     * @symbol ?getLiquidFlowStrength@Actor@@SAMW4MaterialType@@@Z
     * @hash   2065046125
     */
    MCAPI static float getLiquidFlowStrength(enum class MaterialType);
    /**
     * @symbol ?getStatusFlag@Actor@@SA_NAEBVSynchedActorData@@W4ActorFlags@@@Z
     * @hash   -115918032
     */
    MCAPI static bool getStatusFlag(class SynchedActorData const &, enum class ActorFlags);
    /**
     * @symbol ?getViewVector@Actor@@SA?AVVec3@@AEBVVec2@@0M@Z
     * @hash   2071963559
     */
    MCAPI static class Vec3 getViewVector(class Vec2 const &, class Vec2 const &, float);
    /**
     * @symbol ?getViewVector@Actor@@SA?AVVec3@@AEBUIActorMovementProxy@@M@Z
     * @hash   -981200850
     */
    MCAPI static class Vec3 getViewVector(struct IActorMovementProxy const &, float);
    /**
     * @symbol ?hasSubBBIn@Actor@@SA_NAEBVIConstBlockSource@@AEBV?$vector@VAABB@@V?$allocator@VAABB@@@std@@@std@@W4MaterialType@@@Z
     * @hash   -741472079
     */
    MCAPI static bool hasSubBBIn(class IConstBlockSource const &, std::vector<class AABB> const &, enum class MaterialType);
    /**
     * @symbol ?isFree@Actor@@SA_NAEAUIActorMovementProxy@@AEBVVec3@@M@Z
     * @hash   672843283
     */
    MCAPI static bool isFree(struct IActorMovementProxy &, class Vec3 const &, float);
    /**
     * @symbol ?isImmersedInWater@Actor@@SA_NAEBUIActorMovementProxy@@@Z
     * @hash   1246750343
     */
    MCAPI static bool isImmersedInWater(struct IActorMovementProxy const &);
    /**
     * @symbol ?isImmobile@Actor@@SA_NAEBUIActorMovementProxy@@@Z
     * @hash   -351267963
     */
    MCAPI static bool isImmobile(struct IActorMovementProxy const &);
    /**
     * @symbol ?isInLiquid@Actor@@SA_NW4MaterialType@@AEBVIConstBlockSource@@AEBVAABB@@AEBV?$vector@VAABB@@V?$allocator@VAABB@@@std@@@std@@@Z
     * @hash   153847804
     */
    MCAPI static bool isInLiquid(enum class MaterialType, class IConstBlockSource const &, class AABB const &, std::vector<class AABB> const &);
    /**
     * @symbol ?isInScaffolding@Actor@@SA_NAEBUIActorMovementProxy@@@Z
     * @hash   482484983
     */
    MCAPI static bool isInScaffolding(struct IActorMovementProxy const &);
    /**
     * @symbol ?isSitting@Actor@@SA_NAEBUIActorMovementProxy@@@Z
     * @hash   727822551
     */
    MCAPI static bool isSitting(struct IActorMovementProxy const &);
    /**
     * @symbol ?isStanding@Actor@@SA_NAEBUIActorMovementProxy@@@Z
     * @hash   -217618331
     */
    MCAPI static bool isStanding(struct IActorMovementProxy const &);
    /**
     * @symbol ?moveRelative@Actor@@SAXAEAUIActorMovementProxy@@MMMM@Z
     * @hash   -965753458
     */
    MCAPI static void moveRelative(struct IActorMovementProxy &, float, float, float, float);
    /**
     * @symbol ?onClimbableBlock@Actor@@SA_NAEBUIActorMovementProxy@@@Z
     * @hash   334766933
     */
    MCAPI static bool onClimbableBlock(struct IActorMovementProxy const &);
    /**
     * @symbol ?testForCollidableMobs@Actor@@SAXAEBUIActorMovementProxy@@AEAVBlockSource@@AEBVAABB@@AEAV?$vector@VAABB@@V?$allocator@VAABB@@@std@@@std@@@Z
     * @hash   -914242769
     */
    MCAPI static void testForCollidableMobs(struct IActorMovementProxy const &, class BlockSource &, class AABB const &, std::vector<class AABB> &);
    /**
     * @symbol ?tryGetFromComponent@Actor@@SAPEAV1@AEAVActorOwnerComponent@@_N@Z
     * @hash   -769214009
     */
    MCAPI static class Actor * tryGetFromComponent(class ActorOwnerComponent &, bool);
    /**
     * @symbol ?tryGetFromComponent@Actor@@SAPEBV1@AEBVActorOwnerComponent@@_N@Z
     * @hash   1024490213
     */
    MCAPI static class Actor const * tryGetFromComponent(class ActorOwnerComponent const &, bool);
    /**
     * @symbol ?tryGetFromEntity@Actor@@SAPEAV1@AEAVEntityContext@@_N@Z
     * @hash   944642773
     */
    MCAPI static class Actor * tryGetFromEntity(class EntityContext &, bool);
    /**
     * @symbol ?tryGetFromEntity@Actor@@SAPEAV1@V?$StackRefResultT@UEntityRefTraits@@@@_N@Z
     * @hash   -2055625510
     */
    MCAPI static class Actor * tryGetFromEntity(class StackRefResultT<struct EntityRefTraits>, bool);

//protected:
    /**
     * @symbol ?_assignActorMovementProxy@Actor@@IEAAXV?$not_null@V?$shared_ptr@UIActorMovementProxy@@@std@@@gsl@@@Z
     * @hash   -885133697
     */
    MCAPI void _assignActorMovementProxy(class gsl::not_null<class std::shared_ptr<struct IActorMovementProxy>>);
    /**
     * @symbol ?_drop@Actor@@IEAAPEBVItemActor@@AEBVItemStack@@_N@Z
     * @hash   -1178466811
     */
    MCAPI class ItemActor const * _drop(class ItemStack const &, bool);
    /**
     * @symbol ?_isHeadInWater@Actor@@IEBA_NXZ
     * @hash   1936482640
     */
    MCAPI bool _isHeadInWater() const;
    /**
     * @symbol ?_playMovementSound@Actor@@IEAAX_N@Z
     * @hash   626729385
     */
    MCAPI void _playMovementSound(bool);
    /**
     * @symbol ?_refreshAABB@Actor@@IEAAXXZ
     * @hash   638205130
     */
    MCAPI void _refreshAABB();
    /**
     * @symbol ?_setArmorContainer@Actor@@IEAAXV?$unique_ptr@VSimpleContainer@@U?$default_delete@VSimpleContainer@@@std@@@std@@@Z
     * @hash   1739343538
     */
    MCAPI void _setArmorContainer(std::unique_ptr<class SimpleContainer>);
    /**
     * @symbol ?_setDimensionTransitionComponent@Actor@@IEAAXV?$AutomaticID@VDimension@@H@@0H@Z
     * @hash   -764822452
     */
    MCAPI void _setDimensionTransitionComponent(class AutomaticID<class Dimension, int>, class AutomaticID<class Dimension, int>, int);
    /**
     * @symbol ?_setHandContainer@Actor@@IEAAXV?$unique_ptr@VSimpleContainer@@U?$default_delete@VSimpleContainer@@@std@@@std@@@Z
     * @hash   1144784104
     */
    MCAPI void _setHandContainer(std::unique_ptr<class SimpleContainer>);
    /**
     * @symbol ?_setHandContainerItem@Actor@@IEAAXAEBVItemStack@@W4HandSlot@@@Z
     * @hash   852251755
     */
    MCAPI void _setHandContainerItem(class ItemStack const &, enum class HandSlot);
    /**
     * @symbol ?_setHeightOffset@Actor@@IEAAXM@Z
     * @hash   -660949177
     */
    MCAPI void _setHeightOffset(float);
    /**
     * @symbol ?_setPos@Actor@@IEAAXAEBVVec3@@@Z
     * @hash   1533792987
     */
    MCAPI void _setPos(class Vec3 const &);
    /**
     * @symbol ?_setPosPrev@Actor@@IEAAXAEBVVec3@@@Z
     * @hash   540186328
     */
    MCAPI void _setPosPrev(class Vec3 const &);
    /**
     * @symbol ?enableAutoSendPosRot@Actor@@IEAAX_N@Z
     * @hash   -1900668407
     */
    MCAPI void enableAutoSendPosRot(bool);
    /**
     * @symbol ?updateWaterState@Actor@@IEAA_NXZ
     * @hash   -1323831957
     */
    MCAPI bool updateWaterState();
    /**
     * @symbol ?getBlockWhenClimbing@Actor@@KAAEBVBlock@@AEBUIActorMovementProxy@@@Z
     * @hash   994736027
     */
    MCAPI static class Block const & getBlockWhenClimbing(struct IActorMovementProxy const &);

//private:
    /**
     * @symbol ?_addActorNonBuiltInComponents@Actor@@AEAAXXZ
     * @hash   -1509236458
     */
    MCAPI void _addActorNonBuiltInComponents();
    /**
     * @symbol ?_convertOldSave@Actor@@AEAAXAEBVCompoundTag@@@Z
     * @hash   -529474733
     */
    MCAPI void _convertOldSave(class CompoundTag const &);
    /**
     * @symbol ?_damageNearbyMobs@Actor@@AEAAXXZ
     * @hash   -1307183961
     */
    MCAPI void _damageNearbyMobs();
    /**
     * @symbol ?_defaultInitEquipmentDropChances@Actor@@AEAAXXZ
     * @hash   -1518184821
     */
    MCAPI void _defaultInitEquipmentDropChances();
    /**
     * @symbol ?_initializeLeashRopeSystem@Actor@@AEAAXPEAV1@@Z
     * @hash   -2048255811
     */
    MCAPI void _initializeLeashRopeSystem(class Actor *);
    /**
     * @symbol ?_isItemStackNetManagerEnabled@Actor@@AEBA_NXZ
     * @hash   1647372005
     */
    MCAPI bool _isItemStackNetManagerEnabled() const;
    /**
     * @symbol ?_managePassengers@Actor@@AEAAXAEAVBlockSource@@@Z
     * @hash   -320895520
     */
    MCAPI void _managePassengers(class BlockSource &);
    /**
     * @symbol ?_sendLinkPacket@Actor@@AEBAXAEBUActorLink@@@Z
     * @hash   -1592731012
     */
    MCAPI void _sendLinkPacket(struct ActorLink const &) const;
    /**
     * @symbol ?_serializeComponents@Actor@@AEBAXAEAVCompoundTag@@@Z
     * @hash   1038858446
     */
    MCAPI void _serializeComponents(class CompoundTag &) const;
    /**
     * @symbol ?_setupServerAnimationComponent@Actor@@AEAAXXZ
     * @hash   -563580559
     */
    MCAPI void _setupServerAnimationComponent();
    /**
     * @symbol ?_spawnPukeParticles@Actor@@AEAAXXZ
     * @hash   1191317625
     */
    MCAPI void _spawnPukeParticles();
    /**
     * @symbol ?_spawnTreasureHuntingParticles@Actor@@AEAAXXZ
     * @hash   -1889211776
     */
    MCAPI void _spawnTreasureHuntingParticles();
    /**
     * @symbol ?_tryPlantWitherRose@Actor@@AEAAXXZ
     * @hash   1527552216
     */
    MCAPI void _tryPlantWitherRose();
    /**
     * @symbol ?_updateComposition@Actor@@AEAAX_N@Z
     * @hash   1749669035
     */
    MCAPI void _updateComposition(bool);
    /**
     * @symbol ?_updateOwnerChunk@Actor@@AEAAXXZ
     * @hash   -244191479
     */
    MCAPI void _updateOwnerChunk();
    /**
     * @symbol ?_containsSneakCollisionShapes@Actor@@CA_NAEAUIActorMovementProxy@@AEBVAABB@@@Z
     * @hash   1505623584
     */
    MCAPI static bool _containsSneakCollisionShapes(struct IActorMovementProxy &, class AABB const &);
    /**
     * @symbol ?_persistentComponentAssert@Actor@@CAX_N@Z
     * @hash   822582976
     */
    MCAPI static void _persistentComponentAssert(bool);

protected:

private:
    /**
     * @symbol ?DAMAGE_NEARBY_MOBS_DURATION@Actor@@0HB
     * @hash   -1821123849
     */
    MCAPI static int const DAMAGE_NEARBY_MOBS_DURATION;
    /**
     * @symbol ?DEFAULT_MAX_DISTANCE_OPTIMIZATION@Actor@@0MB
     * @hash   -538770564
     */
    MCAPI static float const DEFAULT_MAX_DISTANCE_OPTIMIZATION;
    /**
     * @symbol ?DEFAULT_MAX_TICK_DELAY_OPTIMIZATION@Actor@@0_KB
     * @hash   -1174529778
     */
    MCAPI static unsigned __int64 const DEFAULT_MAX_TICK_DELAY_OPTIMIZATION;

};
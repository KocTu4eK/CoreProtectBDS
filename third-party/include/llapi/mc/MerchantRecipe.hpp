/**
 * @file  MerchantRecipe.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class MerchantRecipe.
 *
 */
class MerchantRecipe {

#define AFTER_EXTRA
// Add Member There

    ItemInstance mBuyA;      //0
    ItemInstance mBuyB;      //136
    ItemInstance mSell;      //272
    int mTier;               //408
    int mUses;               //412
    int mMaxUses;            //416
    int mTraderExp;          //420
    int mRewardExp;          //424
    int mDemand;             //428
    int mBuyCountA;          //432
    int mBuyCountB;          //436
    float mPriceMultiplierA; //440
    float mPriceMultiplierB; //444
    TypedServerNetId<struct RecipeNetIdTag, unsigned int, 0> mRecipeNetId; //448
public:
    inline TypedServerNetId<struct RecipeNetIdTag, unsigned int, 0> getRecipeNetId()
    {
        return mRecipeNetId;
    }

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MERCHANTRECIPE
public:
    class MerchantRecipe& operator=(class MerchantRecipe const &) = delete;
    MerchantRecipe() = delete;
#endif

public:
    /**
     * @symbol ??0MerchantRecipe@@QEAA@AEBVItemInstance@@0@Z
     * @hash   247964198
     */
    MCAPI MerchantRecipe(class ItemInstance const &, class ItemInstance const &);
    /**
     * @symbol ??0MerchantRecipe@@QEAA@AEBVItemInstance@@00@Z
     * @hash   1934358871
     */
    MCAPI MerchantRecipe(class ItemInstance const &, class ItemInstance const &, class ItemInstance const &);
    /**
     * @symbol ??0MerchantRecipe@@QEAA@PEBVCompoundTag@@@Z
     * @hash   -1833913262
     */
    MCAPI MerchantRecipe(class CompoundTag const *);
    /**
     * @symbol ??0MerchantRecipe@@QEAA@AEBV0@@Z
     * @hash   29140417
     */
    MCAPI MerchantRecipe(class MerchantRecipe const &);
    /**
     * @symbol ?calculateDemandPrices@MerchantRecipe@@QEAAXHHH_N@Z
     * @hash   1373968093
     */
    MCAPI void calculateDemandPrices(int, int, int, bool);
    /**
     * @symbol ?createTag@MerchantRecipe@@QEBA?AV?$unique_ptr@VCompoundTag@@U?$default_delete@VCompoundTag@@@std@@@std@@_N@Z
     * @hash   -78379577
     */
    MCAPI std::unique_ptr<class CompoundTag> createTag(bool) const;
    /**
     * @symbol ?getBaseCountA@MerchantRecipe@@QEBAHXZ
     * @hash   114739990
     */
    MCAPI int getBaseCountA() const;
    /**
     * @symbol ?getBaseCountB@MerchantRecipe@@QEBAHXZ
     * @hash   409629894
     */
    MCAPI int getBaseCountB() const;
    /**
     * @symbol ?getBuyAItem@MerchantRecipe@@QEBAAEBVItemInstance@@XZ
     * @hash   -1289925640
     */
    MCAPI class ItemInstance const & getBuyAItem() const;
    /**
     * @symbol ?getBuyBItem@MerchantRecipe@@QEBAAEBVItemInstance@@XZ
     * @hash   -813051606
     */
    MCAPI class ItemInstance const & getBuyBItem() const;
    /**
     * @symbol ?getDemand@MerchantRecipe@@QEBAHXZ
     * @hash   -2145743290
     */
    MCAPI int getDemand() const;
    /**
     * @symbol ?getMaxUses@MerchantRecipe@@QEBAHXZ
     * @hash   1648300520
     */
    MCAPI int getMaxUses() const;
    /**
     * @symbol ?getNetId@MerchantRecipe@@QEBAAEBV?$TypedServerNetId@URecipeNetIdTag@@I$0A@@@XZ
     * @hash   857795887
     */
    MCAPI class TypedServerNetId<struct RecipeNetIdTag, unsigned int, 0> const & getNetId() const;
    /**
     * @symbol ?getSellItem@MerchantRecipe@@QEBAAEBVItemInstance@@XZ
     * @hash   1384166406
     */
    MCAPI class ItemInstance const & getSellItem() const;
    /**
     * @symbol ?getTier@MerchantRecipe@@QEBAHXZ
     * @hash   2092983702
     */
    MCAPI int getTier() const;
    /**
     * @symbol ?getTraderExp@MerchantRecipe@@QEBAIXZ
     * @hash   -222158446
     */
    MCAPI unsigned int getTraderExp() const;
    /**
     * @symbol ?getUses@MerchantRecipe@@QEBAHXZ
     * @hash   -1996360714
     */
    MCAPI int getUses() const;
    /**
     * @symbol ?hasSecondaryBuyItem@MerchantRecipe@@QEBA_NXZ
     * @hash   -749765710
     */
    MCAPI bool hasSecondaryBuyItem() const;
    /**
     * @symbol ?increaseMaxUses@MerchantRecipe@@QEAAXH@Z
     * @hash   -586531784
     */
    MCAPI void increaseMaxUses(int);
    /**
     * @symbol ?increaseUses@MerchantRecipe@@QEAAXXZ
     * @hash   -221150651
     */
    MCAPI void increaseUses();
    /**
     * @symbol ?init@MerchantRecipe@@QEAAXAEBVItemInstance@@00@Z
     * @hash   1160022022
     */
    MCAPI void init(class ItemInstance const &, class ItemInstance const &, class ItemInstance const &);
    /**
     * @symbol ?isOutOfUses@MerchantRecipe@@QEBA_NXZ
     * @hash   -196024574
     */
    MCAPI bool isOutOfUses() const;
    /**
     * @symbol ?isSame@MerchantRecipe@@QEBA_NAEBV1@@Z
     * @hash   -1826200582
     */
    MCAPI bool isSame(class MerchantRecipe const &) const;
    /**
     * @symbol ?isSameButBetter@MerchantRecipe@@QEBA_NAEAV1@@Z
     * @hash   -1312889010
     */
    MCAPI bool isSameButBetter(class MerchantRecipe &) const;
    /**
     * @symbol ?legacyCalculateDemandPrices@MerchantRecipe@@QEAAXHH@Z
     * @hash   -2040666133
     */
    MCAPI void legacyCalculateDemandPrices(int, int);
    /**
     * @symbol ?load@MerchantRecipe@@QEAAXPEBVCompoundTag@@@Z
     * @hash   -1506770449
     */
    MCAPI void load(class CompoundTag const *);
    /**
     * @symbol ?setDemand@MerchantRecipe@@QEAAXH@Z
     * @hash   840720600
     */
    MCAPI void setDemand(int);
    /**
     * @symbol ?setMaxUses@MerchantRecipe@@QEAAXH@Z
     * @hash   -1259780458
     */
    MCAPI void setMaxUses(int);
    /**
     * @symbol ?setNetId@MerchantRecipe@@QEAAXAEBV?$TypedServerNetId@URecipeNetIdTag@@I$0A@@@@Z
     * @hash   1382754989
     */
    MCAPI void setNetId(class TypedServerNetId<struct RecipeNetIdTag, unsigned int, 0> const &);
    /**
     * @symbol ?setPriceMultiplierA@MerchantRecipe@@QEAAXM@Z
     * @hash   937876166
     */
    MCAPI void setPriceMultiplierA(float);
    /**
     * @symbol ?setPriceMultiplierB@MerchantRecipe@@QEAAXM@Z
     * @hash   1928134710
     */
    MCAPI void setPriceMultiplierB(float);
    /**
     * @symbol ?setRewardExp@MerchantRecipe@@QEAAX_N@Z
     * @hash   -2099985006
     */
    MCAPI void setRewardExp(bool);
    /**
     * @symbol ?setTier@MerchantRecipe@@QEAAXH@Z
     * @hash   -2084764680
     */
    MCAPI void setTier(int);
    /**
     * @symbol ?setTraderExp@MerchantRecipe@@QEAAXI@Z
     * @hash   1818458864
     */
    MCAPI void setTraderExp(unsigned int);
    /**
     * @symbol ?setUses@MerchantRecipe@@QEAAXH@Z
     * @hash   -6345256
     */
    MCAPI void setUses(int);
    /**
     * @symbol ?shouldRewardExp@MerchantRecipe@@QEBA_NXZ
     * @hash   1446171082
     */
    MCAPI bool shouldRewardExp() const;
    /**
     * @symbol ??1MerchantRecipe@@QEAA@XZ
     * @hash   -1854463824
     */
    MCAPI ~MerchantRecipe();

};